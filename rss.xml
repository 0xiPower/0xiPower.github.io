<?xml version="1.0" encoding="UTF-8"?><rss version="2.0" xmlns:content="http://purl.org/rss/1.0/modules/content/"><channel><title>☯️xPower</title><description>Life is a fxxking movie.</description><link>https://newpower.pro/</link><language>zh_CN</language><item><title>Arbitrum Stylus 全方位解析：核心竞争力与实践教程</title><link>https://newpower.pro/posts/blockchain/arbitrum/arbitrumstylustutorial/</link><guid isPermaLink="true">https://newpower.pro/posts/blockchain/arbitrum/arbitrumstylustutorial/</guid><description>深度解析 Arbitrum Stylus 的核心技术优势，包括多语言支持、性能跃升、Gas 成本降低、扩展性及模块化架构，并提供实践教程与未来展望。</description><pubDate>Sun, 11 May 2025 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;在区块链开发领域，智能合约的技术瓶颈长期困扰着开发者：Solidity 单一语言生态的封闭性、EVM 计算效率的天花板、高昂的 Gas 费用，如同三重枷锁限制着 Web3 应用的创新边界。2023 年，Arbitrum 推出的 Stylus 技术打破了这一僵局，通过多语言支持、极致性能优化、Gas 成本锐减、无缝扩展性与模块化架构，为智能合约开发开启了全新维度。&lt;/p&gt;
&lt;p&gt;Arbitrum Stylus 是 Arbitrum 网络中的一项新型功能，旨在为智能合约开发者提供更灵活、更高性能的工具。它打破了传统 EVM 框架中只能使用 Solidity 的限制，使得开发者可以借助多种编程语言（如 C、C++、Rust 等）在 Arbitrum 上编写合约，从而提升可扩展性与开发效率。根据官方文档和不同社区的测试，Stylus 在性能和资源利用率方面具有显著优势，引起了广泛关注。&lt;/p&gt;
&lt;p&gt;本文将结合官方资料和社区经验，深度解析 Stylus 如何重塑行业规则，并为读者提供一份详尽的使用指南与未来展望。&lt;/p&gt;
&lt;h2&gt;一、Arbitrum Stylus：重新定义智能合约的核心竞争力&lt;/h2&gt;
&lt;p&gt;Stylus 的出现，为智能合约开发带来了革命性的变化。其核心竞争力主要体现在以下几个方面：&lt;/p&gt;
&lt;h3&gt;1.1 编程语言革命：从「Solidity 孤岛」到「全栈语言互联」&lt;/h3&gt;
&lt;p&gt;传统 EVM 生态中，Solidity 是唯一官方语言，导致全球 90% 以上的开发者（精通 Rust/C++/Python 等主流语言）被挡在 Web3 门外。Stylus 通过 &lt;strong&gt;WASM（WebAssembly）技术&lt;/strong&gt; 彻底打破壁垒：&lt;/p&gt;
&lt;h4&gt;1.1.1 工业级语言原生支持&lt;/h4&gt;
&lt;p&gt;&lt;strong&gt;Rust/C++ 首选&lt;/strong&gt;：支持内存安全特性的 Rust（杜绝缓冲区溢出、悬垂指针等漏洞）与高性能计算见长的 C++，可直接编译为 WASM 字节码部署至 Arbitrum 链。例如，Rust 的加密库 &lt;code&gt;rust-crypto&lt;/code&gt;、C++ 的数学库 &lt;code&gt;Eigen&lt;/code&gt; 可无缝集成到智能合约。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;生态无缝对接&lt;/strong&gt;：通过 &lt;code&gt;wasm-bindgen&lt;/code&gt; 等工具，Python/Go 代码可间接转译为 WASM，实现「全栈语言上链」，彻底释放传统软件生态的万亿级开发资源。&lt;/p&gt;
&lt;p&gt;通过 Stylus，开发者在获取底层性能的同时也能灵活使用多样化的编程范式，例如 Rust 中的所有权模型、C++ 强调的面向对象特性等。在传统 EVM 框架下，一些高级语言特性往往需要手动转换为 Solidity 能接受的形式，但在 Stylus 中，此类操作可得到一定的简化。尤其在涉及大量运算或自定义内存结构时，多语言的支持可显著降低开发难度、提高执行效率。&lt;/p&gt;
&lt;h4&gt;1.1.2 双引擎互操作架构&lt;/h4&gt;
&lt;p&gt;Stylus 并非推翻 EVM，而是构建 &lt;strong&gt;「EVM+WASM」双虚拟机共生体系&lt;/strong&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Solidity 合约可调用 Rust 编写的高性能算法（如 zk-SNARK 证明生成）；&lt;/li&gt;
&lt;li&gt;C++ 开发的链上游戏逻辑能直接读取 EVM 账户的 ERC-721 资产；&lt;/li&gt;
&lt;li&gt;跨语言合约通过 ArbOS 的 &lt;code&gt;arbitrum-std&lt;/code&gt; 标准库实现数据交互，例如：&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;// Rust合约调用EVM的ERC-20转账
let transfer_result = evm_call(
    &quot;0xTokenContractAddress&quot;,
    &quot;transfer&quot;,
    &amp;amp;[sender_address, receiver_address, amount]
);

// EVM合约调用Rust的哈希计算
let hash = wasm_call(&quot;crypto_module&quot;, &quot;sha256&quot;, &amp;amp;data_bytes);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;(注：上述代码片段为示意，具体实现需参考 Stylus SDK)&lt;/strong&gt;\&lt;/p&gt;
&lt;h3&gt;1.2 性能跃升与成本锐减&lt;/h3&gt;
&lt;h4&gt;1.2.1 性能跃升：从「EVM 龟速」到「WASM 超音速」&lt;/h4&gt;
&lt;p&gt;EVM 的栈式架构在复杂计算中效率低下，而 Stylus 基于 WASM 的线性内存模型与 JIT 编译，实现 &lt;strong&gt;10-100 倍性能突破&lt;/strong&gt;（数据来源：Arbitrum 官方测试网）：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;strong&gt;计算场景&lt;/strong&gt;&lt;/th&gt;
&lt;th&gt;EVM 执行时间&lt;/th&gt;
&lt;th&gt;Stylus（Rust）&lt;/th&gt;
&lt;th&gt;效率提升&lt;/th&gt;
&lt;th&gt;Gas 成本对比&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;SHA-256 哈希计算&lt;/td&gt;
&lt;td&gt;120ms&lt;/td&gt;
&lt;td&gt;8ms&lt;/td&gt;
&lt;td&gt;15 倍&lt;/td&gt;
&lt;td&gt;降低 93%&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;椭圆曲线签名生成&lt;/td&gt;
&lt;td&gt;450ms&lt;/td&gt;
&lt;td&gt;32ms&lt;/td&gt;
&lt;td&gt;14 倍&lt;/td&gt;
&lt;td&gt;降低 89%&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;金融衍生品定价模型&lt;/td&gt;
&lt;td&gt;1.2s&lt;/td&gt;
&lt;td&gt;65ms&lt;/td&gt;
&lt;td&gt;18 倍&lt;/td&gt;
&lt;td&gt;降低 91%&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;这种提升在 DeFi 高频交易中尤为关键：某算法交易协议迁移至 Stylus 后，每秒可处理 2000 笔套利交易，而同等操作在 EVM 上因 Gas 限制最多仅能处理 50 笔。&lt;/p&gt;
&lt;h4&gt;1.2.2 Gas 成本锐减：让「链上计算自由」成为可能&lt;/h4&gt;
&lt;p&gt;高 Gas 费用曾是链上复杂逻辑的「拦路虎」，Stylus 通过三重优化实现成本革命：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;计算效率原生优势&lt;/strong&gt;：WASM 的二进制指令密度比 EVM 字节码高 50%，且无需复杂的 Gas 计量模型，同等计算量下 Gas 消耗呈指数级下降。例如：
&lt;ul&gt;
&lt;li&gt;链上验证一个 zk-SNARK 证明，EVM 需消耗 200 万 Gas（约 15 美元），Stylus 仅需 20 万 Gas（约 1.2 美元）；&lt;/li&gt;
&lt;li&gt;复杂的金融合约交互（如期权定价），Gas 成本从平均 50 美元降至 3 美元以下。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;内存与存储优化&lt;/strong&gt;：Rust 的所有权系统避免了 EVM 常见的「数据拷贝损耗」，WASM 的紧凑格式使链上存储成本降低 40%。某 NFT 游戏迁移后，角色属性动态更新的 Gas 成本从 2000Gas 降至 800Gas。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;据官方及社区的基准测试，Stylus 合约在同等操作下往往可以实现较低的 Gas 消耗，同时保有更快的执行速度。尤其当合约逻辑复杂时，使用系统级语言可能在内存管理、计算等方面带来效率收益。&lt;/p&gt;
&lt;h3&gt;1.3 扩展性突破与生态融合：从「功能受限」到「场景无限」&lt;/h3&gt;
&lt;p&gt;Stylus 通过模块化架构与生态兼容性，解锁三大类此前 EVM 无法承载的场景，并与 Arbitrum 生态深度融合：&lt;/p&gt;
&lt;h4&gt;1.3.1 高性能金融应用&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;高频交易协议&lt;/strong&gt;：C++ 编写的订单簿引擎支持 10 万 TPS，延迟控制在 50 微秒，为算法交易、量化策略提供基础设施；&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;实时风险计算&lt;/strong&gt;：Rust 实现的蒙特卡洛模拟合约，可在 200ms 内完成万人级保单的风险评估，推动去中心化保险产品落地。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;1.3.2 链上原生交互体验&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;实时物理引擎&lt;/strong&gt;：C++ 移植的 Box2D 引擎在链上实现车辆碰撞、流体模拟，某赛车游戏因此达到 120FPS 流畅度，操作延迟从 3 秒缩短至 200ms；&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;动态 NFT 系统&lt;/strong&gt;：支持复杂状态变更（如武器磨损度、土地肥力），单合约调用 Gas 成本仅为 EVM 的 1/20。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;1.3.3 企业级合规需求&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;KYC/AML 模块&lt;/strong&gt;：金融机构用 C++ 开发的合规验证逻辑，处理速度提升 50 倍，同时满足 GDPR 数据隐私要求；&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;供应链溯源&lt;/strong&gt;：Rust 实现的零知识证明合约，在不泄露商业数据的前提下完成跨企业验证，审计时间从 30 天压缩至 2 小时。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;1.3.4 合约可组合性&lt;/h4&gt;
&lt;p&gt;除了性能的提升，Arbitrum Stylus 也关注与其他协议的交互和可组合性。Stylus 将使复杂协议在合约层面的互操作变得更加容易，可在更多场景下实现与 DeFi、NFT 或其他 Layer 2 协议的联动。&lt;/p&gt;
&lt;h4&gt;1.3.5 与 Arbitrum 生态的融合&lt;/h4&gt;
&lt;p&gt;Stylus 充分利用了 Arbitrum 在 Layer 2 的技术栈，依托安全性与高吞吐量的基础，提供易于使用的接口。它既能与传统的 EVM 合约配合，实现资源共享和模块化部署，也能独立运行基于系统级语言的业务逻辑，兼具灵活性和兼容性。&lt;/p&gt;
&lt;h3&gt;1.4 Stylus 技术架构与核心原理&lt;/h3&gt;
&lt;h4&gt;1.4.1 Stylus 技术模块：构建开发者友好生态&lt;/h4&gt;
&lt;p&gt;Arbitrum 通过三层技术架构降低开发门槛，形成完整工具链闭环：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;语言层：保留开发习惯&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;支持主流 IDE（VS Code/PyCharm）调试，兼容 Git 版本控制与 Docker 容器化部署；&lt;/li&gt;
&lt;li&gt;提供 &lt;code&gt;arbitrum-std-rs&lt;/code&gt; (针对 Rust) 等标准库，封装区块链核心接口（如区块高度获取、合约调用）：&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;// 示例：获取当前区块时间戳 (具体API请参考官方SDK)
let current_time = arbitrum::chain::timestamp();

// 示例：查询ERC-20合约余额 (具体API请参考官方SDK)
let balance = arbitrum::evm::erc20::balance_of(
     token_contract,
     user_address
);
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;编译执行层：高效转化链路&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;基于 LLVM 编译器链，将高级语言转为 WASM 字节码，支持 &lt;code&gt;cargo build --release&lt;/code&gt; 一键生成部署文件；&lt;/li&gt;
&lt;li&gt;Stylus VM 针对区块链场景优化，内存访问速度比通用 WASM 引擎快 30%。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;互操作层：无缝连接 EVM&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;ArbOS 作为「智能合约操作系统」，实现双虚拟机状态共享与函数互调；&lt;/li&gt;
&lt;li&gt;支持 Solidity 与 Rust/C++ 合约在同一交易中协同，例如：Rust 预言机获取链下数据后，触发 EVM 借贷合约的利率调整。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h4&gt;1.4.2 背景：EVM 的局限与 Layer 2 的演进&lt;/h4&gt;
&lt;p&gt;以太坊虚拟机（EVM）为智能合约生态提供了基础支撑，但其在性能与多语言支持上存在局限。这些局限使得编写与部署高性能合约的过程较为艰难，尤其在涉及复杂业务逻辑或者需要高吞吐量时。&lt;/p&gt;
&lt;p&gt;Arbitrum 作为一种 Layer 2 解决方案，在主链上通过汇总批量交易来降低 Gas 成本并提高可扩展性。它利用了自己的执行环境，同时通过 Rollup 技术将交易数据安全地记录在以太坊上，实现高效与安全的平衡。&lt;/p&gt;
&lt;h4&gt;1.4.3 Stylus 的引入：Arbitrum 上的协同工作方式&lt;/h4&gt;
&lt;p&gt;在深入讨论之前，需要进一步了解 Stylus 引擎与 Arbitrum Rollup 之间的协同工作方式。Stylus 背后的核心思路是将多语言编译产物转换为与 Arbitrum VM 兼容的字节码，并利用 Arbitrum 的 Rollup 机制实现高吞吐量的交易打包与提交。同时，Stylus 还注重可维护性，对跨语言交互和数据结构格式进行了适配，让不同语言实现的逻辑能在同一合约生态中顺畅调用与组合。这为复杂场景下的风险控制与扩展提供了创新空间。&lt;/p&gt;
&lt;p&gt;在此基础上，Arbitrum 推出了 Stylus，实现了对多种系统级语言编写智能合约的支持。与传统 EVM 合约相比，Stylus 合约运行在与 Arbitrum 兼容的环境中，利用字节码级的方式整合 Rust、C/C++ 等语言所编译生成的构件。这使得开发者可在熟悉的语言中进行编程，并在 Arbitrum 上享受更高的吞吐量与灵活性。&lt;/p&gt;
&lt;h2&gt;二、基础使用流程与示例&lt;/h2&gt;
&lt;h3&gt;2.1 环境准备&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;编译工具链&lt;/strong&gt;：确保安装适用于目标语言（Rust/C/C++）的编译器，如进行 Rust 开发时，需要安装 &lt;code&gt;rustup&lt;/code&gt; 并设置好相应的 nightly 工具链。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Arbitrum 节点或测试网络&lt;/strong&gt;：可选择官方提供的 Rollup 测试环境，或者在本地搭建一个 Arbitrum 节点，用于对合约进行本地测试。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;SDK 获取&lt;/strong&gt;：从官方仓库 (如 &lt;a href=&quot;https://github.com/OffchainLabs/stylus-sdk-rs&quot;&gt;OffchainLabs/stylus-sdk-rs&lt;/a&gt; for Rust) 克隆或下载最新版本的 Stylus SDK，并按照文档指引进行安装和配置。&lt;/li&gt;
&lt;/ol&gt;
&lt;h3&gt;2.2 编写 Stylus 合约&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;项目初始化&lt;/strong&gt;：以 Rust 为例，可使用 &lt;code&gt;cargo new&lt;/code&gt; 命令创建新项目。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;实现业务逻辑&lt;/strong&gt;：在项目中编写具体的函数和数据结构，并保证符合 Stylus 运行环境的适配要求（如入口函数、内存管理、回调等）。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;测试与调试&lt;/strong&gt;：在本地通过编译工具链测试代码逻辑，使用官方或社区提供的测试框架检查合约行为。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;对于开发者而言，除了要掌握基本的 Rust 或 C/C++ 语法外，还需理解 Stylus 合约如何与 Arbitrum 上的其他合约进行信息交互。例如，与传统 EVM 合约之间的调用方式会包含一层 Stylus 专用的编解码步骤，确保映射到通用的字节码接口后双方能够正确接收与发送数据。同时，合约内部需要对 Gas 成本保持敏感，因为虽然 Stylus 有潜在的费用和性能优势，但不合理的逻辑仍可能导致资源浪费。&lt;/p&gt;
&lt;h3&gt;2.3 编译与部署&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;编译生成字节码&lt;/strong&gt;：按照 Stylus SDK 的说明，将 Rust/C/C++ 源码编译为 Stylus 兼容的字节码包。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;部署脚本&lt;/strong&gt;：使用 Arbitrum 提供的 CLI 工具或 Web 界面，将生成的字节码合约部署到测试网或主网。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;合约交互&lt;/strong&gt;：完成部署后，即可通过 Arbitrum 的 RPC 或者兼容的工具（如 Hardhat、Foundry 等），对合约方法进行调用或阅读合约状态。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;在部署合约时，需要注意目标链所在的网络环境，如测试网或主网。为了在测试环境中更快地迭代，开发者可借助 Arbitrum 提供的公共测试网，或本地模拟环境，先完成初步验证和调试，再通过官方 CLI 或者第三方工具进行正式部署。部署后，可使用类似 Hardhat 或 Foundry 等工具与合约进行交互、测试调用结果，并借助区块浏览器或监控服务查看合约执行的细节与统计信息。&lt;/p&gt;
&lt;h3&gt;2.4 使用示例 (Rust)&lt;/h3&gt;
&lt;p&gt;以下为一个极简的 Rust 示例，仅用于演示合约编写逻辑与部署方式（具体可参考官方 &lt;a href=&quot;https://docs.arbitrum.io/stylus/gentle-introduction&quot;&gt;Gentle Introduction&lt;/a&gt; 及相关文档）：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;// 假设在 main.rs 中使用 Rust 编写
// 真实的 Stylus 合约会使用 SDK 提供的宏和类型
#![cfg_attr(not(feature = &quot;export-abi&quot;), no_main)]
extern crate alloc;

#[global_allocator]
static ALLOC: wee_alloc::WeeAlloc = wee_alloc::WeeAlloc::INIT;

use stylus_sdk::{alloy_primitives::U256, prelude::*};

sol_storage! {
    #[entrypoint] // 使其成为合约的入口点
    struct Counter {
        uint256 number;
    }
}
//
#[external] // 标记为外部可调用函数
impl Counter {
    pub fn number(&amp;amp;self) -&amp;gt; Result&amp;lt;U256, Vec&amp;lt;u8&amp;gt;&amp;gt; {
        Ok(self.number.get())
    }

    pub fn set_number(&amp;amp;mut self, new_number: U256) -&amp;gt; Result&amp;lt;(), Vec&amp;lt;u8&amp;gt;&amp;gt; {
        self.number.set(new_number);
        Ok(())
    }

    pub fn increment(&amp;amp;mut self) -&amp;gt; Result&amp;lt;(), Vec&amp;lt;u8&amp;gt;&amp;gt; {
        let current = self.number.get();
        self.number.set(current + U256::from(1));
        Ok(())
    }
}

// 以下为原文中提供的极简示例，非标准 Stylus 合约格式，仅作概念演示
fn main() {
    // 在 Stylus 中执行的简单示例逻辑
    // 例如：读取输入参数、执行一些计算，然后返回结果
    let result = add(2, 3);
    println!(&quot;Execution result: {}&quot;, result);
}

fn add(a: i32, b: i32) -&amp;gt; i32 {
    a + b
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;上方的 Rust 示例（&lt;code&gt;main&lt;/code&gt; 和 &lt;code&gt;add&lt;/code&gt; 函数）仅仅展示了一个最简化的逻辑概念，并非一个可直接部署的 Stylus 合约。一个真正的 Stylus 合约（如注释中展示的 &lt;code&gt;Counter&lt;/code&gt; 示例结构）会使用 Stylus SDK 提供的宏（如 &lt;code&gt;sol_storage!&lt;/code&gt;, &lt;code&gt;#[entrypoint]&lt;/code&gt;, &lt;code&gt;#[external]&lt;/code&gt;）和特定的类型来定义状态和函数，以便与 Arbitrum 虚拟机正确交互。&lt;/p&gt;
&lt;p&gt;在真正的 Stylus 合约中，我们往往会定义多种接口函数和业务逻辑模块，并通过 SDK 中的 ABI 适配层来处理对外接口。很多情况下，需要结合链下数据进行混合计算或操作，例如通过 Oracles 获取价格信息，再在合约内执行精准的数值运算。正是这些对多语言特性的需求，促使 Stylus 的开发与演进。&lt;/p&gt;
&lt;p&gt;在完成本地测试后，通过 Stylus SDK 对项目进行打包并部署，即可在 Arbitrum 网络中与该合约进行交互。&lt;/p&gt;
&lt;h2&gt;三、常见问题、未来展望与结语&lt;/h2&gt;
&lt;h3&gt;3.1 常见问题&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;合约审计&lt;/strong&gt;：虽然 Stylus 提供多语言支持，但依然需要对合约逻辑、边界条件和安全隐患进行审计。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;生态工具链&lt;/strong&gt;：Stylus 属于新兴技术，其可用的调试工具、框架与库仍在快速迭代，未来可能会出现更丰富的开发工具与最佳实践。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;与 EVM 的共存&lt;/strong&gt;：Stylus 并非取代 EVM，而是与 EVM 合约共同存在，为开发者提供多元化选择。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;性能与可扩展性&lt;/strong&gt;：后续官方或社区仍会进行深入优化，包含编译器层面和执行引擎层面的改进，提升整体性能。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;另外，由于 Stylus 仍处于积极的迭代阶段，合约安全审核和工具链测试必须引起足够的重视。开发者在正式发布前，应该借鉴常见的漏洞分析方法，对可能出现的越界读写、内存泄漏或函数访问控制不当等问题进行排查。&lt;/p&gt;
&lt;h3&gt;3.2 未来展望与结语&lt;/h3&gt;
&lt;p&gt;随着社区的不断壮大，更多的审计机构和开发团队也将逐步建立完善的最佳实践与范式。未来，随着在合规性与易用性方面的改进，Stylus 将有望进一步融入主流 Layer 2 生态。&lt;/p&gt;
&lt;p&gt;Arbitrum Stylus 的价值，远不止于技术参数的提升，更在于它打破了「区块链开发的语言壁垒」，让数千万传统开发者首次拥有平等参与 Web3 的机会。当 Rust 工程师能用熟悉的语言编写 DeFi 协议，当 C++ 开发者为链游注入复杂物理逻辑，当企业架构师用 Stylus 构建合规链上系统，我们正在见证的，是智能合约从「极客玩具」到「主流基础设施」的历史性跨越。&lt;/p&gt;
&lt;p&gt;对于开发者而言，现在正是抢占技术先机的黄金窗口 ——Stylus 不仅是一个工具，更是通往 Web3 创新蓝海的通行证。随着 Arbitrum 生态的持续扩张，这场由编程语言引发的革命，终将重塑整个区块链开发的未来图景。&lt;/p&gt;
&lt;p&gt;通过上述内容，可以进一步深入了解 Stylus 的实现原理与应用场景。总之，Arbitrum Stylus 集多语言支持、执行效率与安全性于一体，为智能合约开发者提供了新的选择。希望本教程能为初次接触本技术的读者带来帮助，后续可持续关注官方与社区的更新，及时掌握最新功能与最佳实践。&lt;/p&gt;
&lt;p&gt;对于那些希望通过多语言能力来提升合约可读性与可维护性的团队而言，Stylus 的出现无疑是一个重要机遇。它不仅扩大了人才储备的范围，也为各类新型用例提供了技术可行性。在具体应用上，无论是对 NFT 协议进行技术创新，还是实现更加复杂的金融衍生品逻辑，都可以充分利用多语言编程带来的灵活性。未来，借助社区的力量，Stylus 有望提供更齐全的库与开发框架来支撑大型项目的持续迭代与运行。&lt;/p&gt;
&lt;p&gt;希望本文能为读者提供一个清晰的 Stylus 入门指南，帮助大家在 Arbitrum 生态中更好地发挥多语言编程的优势。随着技术的不断发展，Stylus 将在智能合约领域扮演越来越重要的角色。&lt;/p&gt;
&lt;h2&gt;四、参考资料与延伸探索&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://arbitrum.io/stylus&quot;&gt;Arbitrum 官方介绍&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://docs.arbitrum.io/stylus/gentle-introduction&quot;&gt;Arbitrum Stylus Gentle Introduction (官方入门文档)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://docs.welldonestudio.io/tutorials/arbitrum-stylus-benchmark&quot;&gt;Arbitrum Stylus Benchmark&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://fishyonchain.medium.com/arbitrum-stylus-a-new-standard-for-smart-contract-composability-2c5c3679ca20&quot;&gt;Fishyonchain: Stylus 可组合性文章&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/OffchainLabs/stylus-sdk-rs&quot;&gt;Stylus SDK (Rust)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;通过上述资料，可以进一步深入了解 Stylus 的实现原理与应用场景。&lt;/p&gt;
</content:encoded></item><item><title>随笔20250508</title><link>https://newpower.pro/posts/notebook/diary/%E9%9A%8F%E7%AC%9420250508/</link><guid isPermaLink="true">https://newpower.pro/posts/notebook/diary/%E9%9A%8F%E7%AC%9420250508/</guid><pubDate>Thu, 08 May 2025 00:00:00 GMT</pubDate><content:encoded>&lt;h2&gt;🎁【开箱惊喜】HackQuest x Arbitrum共学营结营礼物大公开&lt;/h2&gt;
&lt;p&gt;激动的心，颤抖的手，终于收到了HackQuest和Arbitrum共学营的结营礼物！🎉&lt;br /&gt;
开箱的瞬间，满满的惊喜和感动，每一件小物都充满了心意和创意。🎨&lt;br /&gt;
👜 帆布袋：简约而不简单，上面的图案超级可爱，日常出门必备单品！&lt;br /&gt;
🔑 钥匙扣：设计感十足，细节满满，每次拿出钥匙都能想起这段难忘的学习旅程。&lt;br /&gt;
📚 笔记本：记录学习的点滴，每一页都是成长的见证。&lt;br /&gt;
🎖️ 徽章：每一枚都是对努力的肯定，也是对未来的期许。&lt;br /&gt;
这份礼物不仅是对过去努力的肯定，更是对未来的鼓励。感谢HackQuest和Arbitrum，让我在学习的道路上不断前行！🚀&lt;br /&gt;
Let&apos;s Quack!!!!!!!!!!!!!!!!!!!!!!!!!!&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://asset-repository.vercel.app/blog/library/H00001.jpg&quot; alt=&quot;alt text&quot; /&gt;
&lt;img src=&quot;https://asset-repository.vercel.app/blog/library/H00002.jpg&quot; alt=&quot;alt text&quot; /&gt;&lt;/p&gt;
</content:encoded></item><item><title>英语构词法</title><link>https://newpower.pro/posts/notebook/english/%E6%9E%84%E8%AF%8D%E6%B3%95/</link><guid isPermaLink="true">https://newpower.pro/posts/notebook/english/%E6%9E%84%E8%AF%8D%E6%B3%95/</guid><pubDate>Wed, 07 May 2025 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;英语构词法：揭开词汇创造的密码&lt;/p&gt;
&lt;p&gt;你是否曾好奇英语词汇为何如此庞大且灵活？从 &quot;unhappiness&quot; 到 &quot;smartphone&quot;，从 &quot;email&quot; 到 &quot;smog&quot;，这些单词的诞生并非偶然，而是遵循着一套系统的构词规则。掌握英语构词法，就像获得一把钥匙，不仅能快速扩充词汇量，更能深入理解语言背后的逻辑。本文将带你探索构词法的核心奥秘，结合实例解析六大主要构词方式，助你成为词汇记忆的高效学习者。&lt;/p&gt;
&lt;h3&gt;一、派生法：词根词缀的化学反应&lt;/h3&gt;
&lt;p&gt;派生法是英语构词的主力军，约 70% 的词汇由此而生。它通过&lt;strong&gt;前缀改变词义&lt;/strong&gt;、&lt;strong&gt;后缀改变词性&lt;/strong&gt;，如同汉字的偏旁部首，赋予单词新的生命力。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;词根的核心地位&lt;/strong&gt;：词根是单词的灵魂，如 &quot;vis&quot;（看）在 &quot;visible&quot;（可见的）、&quot;vision&quot;（视力）中反复出现。希腊语和拉丁语词根（如 &quot;hydr-&quot; 水、&quot;aqua-&quot; 水）与日耳曼语词汇（如 &quot;water&quot;）共同构成英语的双重词汇体系。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;前缀的魔术手&lt;/strong&gt;：否定前缀 &quot;un-&quot;、&quot;in-&quot;、&quot;dis-&quot; 能瞬间反转词义（happy→unhappy），而 &quot;en-&quot;（使...）可将形容词转化为动词（large→enlarge）。值得注意的是，前缀可能因发音调整拼写（如 &quot;im-possible&quot; 而非 &quot;in-possible&quot;）。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;后缀的变形术&lt;/strong&gt;：后缀不仅改变词性，还能细化词义。例如，动词 &quot;work&quot; 加 &quot;-able&quot; 变为形容词 &quot;workable&quot;（可行的），而 &quot;accept&quot; 加 &quot;-able&quot; 成为 &quot;acceptable&quot;（可接受的）。需要注意的是，法语词根多接 &quot;-able&quot;，希腊 / 拉丁词根则常用 &quot;-ible&quot;（如 &quot;credible&quot; 可信的）。&lt;/p&gt;
&lt;h3&gt;二、合成法：词汇的积木游戏&lt;/h3&gt;
&lt;p&gt;合成法将两个或多个独立单词组合成新词，如同搭积木般直观。这种构词法在科技、日常用语中尤为常见，约占英语词汇的 30%。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;直接组合&lt;/strong&gt;：如 &quot;waterproof&quot;（防水的）由 &quot;water&quot;（水）和 &quot;proof&quot;（对抗）构成，&quot;highclass&quot;（高级的）结合 &quot;high&quot;（高）与 &quot;class&quot;（等级）。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;混合词的创意&lt;/strong&gt;：当单词过长时，人们会截取部分字母组合，例如 &quot;smog&quot;（烟雾）来自 &quot;smoke&quot; 和 &quot;fog&quot;，&quot;brunch&quot;（早午餐）融合 &quot;breakfast&quot; 与 &quot;lunch&quot;。科技领域的 &quot;telecast&quot;（电视广播）由 &quot;television&quot; 和 &quot;broadcast&quot; 混合而成，展现了语言的创新性。&lt;/p&gt;
&lt;h3&gt;三、转化法：一词多义的变形记&lt;/h3&gt;
&lt;p&gt;转化法允许单词在词形不变的情况下转换词性，赋予语言极大的灵活性。例如：&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;名词→动词&lt;/strong&gt;：&quot;book&quot;（书）→&quot;book a flight&quot;（预订航班），&quot;hand&quot;（手）→&quot;hand me the pen&quot;（递给我笔）。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;形容词→动词&lt;/strong&gt;：&quot;better&quot;（更好的）→&quot;better our lives&quot;（改善生活），&quot;slow&quot;（慢的）→&quot;slow down&quot;（减速）。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;动词→名词&lt;/strong&gt;：&quot;swim&quot;（游泳）→&quot;have a swim&quot;（游泳），&quot;laugh&quot;（笑）→&quot;burst into laughter&quot;（大笑）。&lt;/p&gt;
&lt;h3&gt;四、缩写法：语言的瘦身术&lt;/h3&gt;
&lt;p&gt;缩写法通过缩短单词或取首字母创造简洁表达，常见于日常交流和专业领域：&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;截短词&lt;/strong&gt;：&quot;ad&quot;（广告）来自 &quot;advertisement&quot;，&quot;phone&quot;（电话）截取自 &quot;telephone&quot;，&quot;flu&quot;（流感）省略首尾字母。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;首字母缩略词&lt;/strong&gt;：&quot;NASA&quot;（美国宇航局）、&quot;VIP&quot;（贵宾）、&quot;TOEFL&quot;（托福考试）等，读音可逐个字母或作为单词（如 &quot;NASA&quot; 读作 /&apos;næsə/）。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;特殊缩写&lt;/strong&gt;：&quot;AIDS&quot;（艾滋病）由 &quot;Acquired Immune Deficiency Syndrome&quot; 缩写而来，&quot;radar&quot;（雷达）则是 &quot;Radio Detection and Ranging&quot; 的首字母组合。&lt;/p&gt;
&lt;h3&gt;五、逆成法：反向创造的艺术&lt;/h3&gt;
&lt;p&gt;逆成法通过删除误认为词缀的部分创造新词，常见于动词生成。例如：&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;名词→动词&lt;/strong&gt;：&quot;editor&quot;（编辑）去掉 &quot;-or&quot; 变成 &quot;edit&quot;（编辑），&quot;donation&quot;（捐赠）去掉 &quot;-ation&quot; 成为 &quot;donate&quot;（捐赠）。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;形容词→动词&lt;/strong&gt;：&quot;lazy&quot;（懒惰的）去掉 &quot;-y&quot; 变为 &quot;laze&quot;（偷懒），&quot;greedy&quot;（贪婪的）去掉 &quot;-y&quot; 成为 &quot;greed&quot;（贪婪）。&lt;/p&gt;
&lt;h3&gt;六、混合法：跨词融合的新物种&lt;/h3&gt;
&lt;p&gt;混合法结合两个单词的部分字母，创造兼具两者含义的新词：&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;首尾拼接&lt;/strong&gt;：&quot;motel&quot;（汽车旅馆）=motor + hotel，&quot;Chunnel&quot;（英法海底隧道）=channel + tunnel。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;保留部分词形&lt;/strong&gt;：&quot;paratroops&quot;（空降部队）=parachute + troops，&quot;docudrama&quot;（纪录片）=document + drama。&lt;/p&gt;
&lt;h3&gt;学习构词法的实用技巧&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;词根词缀拆解&lt;/strong&gt;：遇到生词时，尝试分解为前缀 + 词根 + 后缀。例如 &quot;invisible&quot;=in-（否定）+vis（看）+ -ible（可... 的），意为 &quot;不可见的&quot;。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;建立词汇网络&lt;/strong&gt;：以词根为中心，扩展相关词汇。如 &quot;aud&quot;（听）可衍生出 &quot;audible&quot;（可听见的）、&quot;audience&quot;（听众）、&quot;audio&quot;（音频）等。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;注意例外与变体&lt;/strong&gt;：并非所有派生词都遵循规则，例如 &quot;effible&quot;（可描述的）实际不存在，只有其否定形式 &quot;ineffible&quot;（不可描述的）。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;结合语境记忆&lt;/strong&gt;：通过阅读和听力积累合成词与转化词，如 &quot;Google&quot; 作为动词（搜索）在 &quot;I Google the answer&quot; 中的用法。&lt;/p&gt;
&lt;p&gt;&amp;lt;!-- 英语构词法是词汇学习的加速器，掌握它不仅能让背单词事半功倍，更能提升对语言的敏感度。无论是通过派生法解析复杂词汇，还是用合成法创造新表达，构词法都揭示了语言的创造性与逻辑性。下次遇到陌生单词时，不妨尝试拆解它的 &quot;基因&quot;，你会发现词汇的世界远比想象中更有趣！ --&amp;gt;&lt;/p&gt;
&lt;p&gt;（本文参考资料：&lt;a href=&quot;https://mp.weixin.qq.com/s/Vj-1SIebCe0RWswom2o2sg&quot;&gt;英语构词法详解&lt;/a&gt;及多平台权威构词法研究成果）&lt;/p&gt;
</content:encoded></item><item><title>英语语法</title><link>https://newpower.pro/posts/notebook/english/%E8%AF%AD%E6%B3%95%E4%BD%93%E7%B3%BB/</link><guid isPermaLink="true">https://newpower.pro/posts/notebook/english/%E8%AF%AD%E6%B3%95%E4%BD%93%E7%B3%BB/</guid><pubDate>Tue, 06 May 2025 00:00:00 GMT</pubDate><content:encoded>&lt;h2&gt;一、语法体系基石：从字母到词性&lt;/h2&gt;
&lt;h3&gt;（一）26 个英文字母 —— 语言的最小单位&lt;/h3&gt;
&lt;p&gt;英语由 26 个字母构成，分为元音字母（Aa、Ee、Ii、Oo、Uu）和辅音字母（其余 21 个）。正确掌握字母的发音和书写，是拼写单词、学习音标和发音规则的基础。&lt;/p&gt;
&lt;h3&gt;（二）10 种单词词性 —— 句子的 “建筑材料”&lt;/h3&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;词性&lt;/th&gt;
&lt;th&gt;缩写&lt;/th&gt;
&lt;th&gt;定义&lt;/th&gt;
&lt;th&gt;例词&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;名词&lt;/td&gt;
&lt;td&gt;n.&lt;/td&gt;
&lt;td&gt;表示人或事物的总称&lt;/td&gt;
&lt;td&gt;apple（苹果）、pen（笔）&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;动词&lt;/td&gt;
&lt;td&gt;v.&lt;/td&gt;
&lt;td&gt;表示动作或状态&lt;/td&gt;
&lt;td&gt;smile（微笑）、finish（完成）&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;形容词&lt;/td&gt;
&lt;td&gt;adj.&lt;/td&gt;
&lt;td&gt;修饰名词，描述特质&lt;/td&gt;
&lt;td&gt;good（好的）、short（短的）&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;副词&lt;/td&gt;
&lt;td&gt;adv.&lt;/td&gt;
&lt;td&gt;修饰动词、形容词或其他副词&lt;/td&gt;
&lt;td&gt;now（现在）、truly（真正地）&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;代词&lt;/td&gt;
&lt;td&gt;pron.&lt;/td&gt;
&lt;td&gt;代替名词、形容词或数词&lt;/td&gt;
&lt;td&gt;he（他）、this（这个）&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;数词&lt;/td&gt;
&lt;td&gt;num.&lt;/td&gt;
&lt;td&gt;表示数量或顺序&lt;/td&gt;
&lt;td&gt;one（一）、first（第一）&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;介词&lt;/td&gt;
&lt;td&gt;prep.&lt;/td&gt;
&lt;td&gt;用在名 / 代词前，说明关系&lt;/td&gt;
&lt;td&gt;in（在…… 里）、on（在…… 上）&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;冠词&lt;/td&gt;
&lt;td&gt;art.&lt;/td&gt;
&lt;td&gt;用在名词前，限定范围&lt;/td&gt;
&lt;td&gt;a/an（泛指）、the（特指）&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;连词&lt;/td&gt;
&lt;td&gt;conj.&lt;/td&gt;
&lt;td&gt;连接短语或句子&lt;/td&gt;
&lt;td&gt;and（和）、but（但是）&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;感叹词&lt;/td&gt;
&lt;td&gt;int.&lt;/td&gt;
&lt;td&gt;表达情感或语气&lt;/td&gt;
&lt;td&gt;oh（哦）、well（嗯）&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;二、语法核心：从词到句的逻辑纽带&lt;/h2&gt;
&lt;h3&gt;（一）20 个疑问代词 —— 精准提问的关键&lt;/h3&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;疑问词&lt;/th&gt;
&lt;th&gt;提问对象&lt;/th&gt;
&lt;th&gt;例句&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;who&lt;/td&gt;
&lt;td&gt;人（主格）&lt;/td&gt;
&lt;td&gt;Who is standing there?（谁站在那里？）&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;whom&lt;/td&gt;
&lt;td&gt;人（宾格）&lt;/td&gt;
&lt;td&gt;Whom did you meet?（你遇见了谁？）&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;what&lt;/td&gt;
&lt;td&gt;事物&lt;/td&gt;
&lt;td&gt;What do you want?（你想要什么？）&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;why&lt;/td&gt;
&lt;td&gt;原因&lt;/td&gt;
&lt;td&gt;Why are you late?（你为什么迟到？）&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;where&lt;/td&gt;
&lt;td&gt;地点&lt;/td&gt;
&lt;td&gt;Where is the library?（图书馆在哪里？）&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;which&lt;/td&gt;
&lt;td&gt;特定范围的人 / 物&lt;/td&gt;
&lt;td&gt;Which book do you like?（你喜欢哪本书？）&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;when&lt;/td&gt;
&lt;td&gt;时间&lt;/td&gt;
&lt;td&gt;When will you leave?（你什么时候离开？）&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;how&lt;/td&gt;
&lt;td&gt;方式 / 程度&lt;/td&gt;
&lt;td&gt;How do you go to school?（你怎么去上学？）&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;whose&lt;/td&gt;
&lt;td&gt;所属关系&lt;/td&gt;
&lt;td&gt;Whose pen is this?（这是谁的笔？）&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;how old&lt;/td&gt;
&lt;td&gt;年龄&lt;/td&gt;
&lt;td&gt;How old is your sister?（你妹妹多大了？）&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;what color&lt;/td&gt;
&lt;td&gt;颜色&lt;/td&gt;
&lt;td&gt;What color is your car?（你的车是什么颜色？）&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;how tall&lt;/td&gt;
&lt;td&gt;高度&lt;/td&gt;
&lt;td&gt;How tall is the tree?（这棵树有多高？）&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;how big&lt;/td&gt;
&lt;td&gt;大小&lt;/td&gt;
&lt;td&gt;How big is your room?（你的房间有多大？）&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;how far&lt;/td&gt;
&lt;td&gt;距离&lt;/td&gt;
&lt;td&gt;How far is the school?（学校有多远？）&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;how many&lt;/td&gt;
&lt;td&gt;可数名词数量&lt;/td&gt;
&lt;td&gt;How many books are there?（有多少本书？）&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;how much&lt;/td&gt;
&lt;td&gt;不可数名词数量 / 价格&lt;/td&gt;
&lt;td&gt;How much milk do you need?（你需要多少牛奶？）&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;how often&lt;/td&gt;
&lt;td&gt;频率&lt;/td&gt;
&lt;td&gt;How often do you exercise?（你多久锻炼一次？）&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;what time&lt;/td&gt;
&lt;td&gt;具体时间&lt;/td&gt;
&lt;td&gt;What time is it?（几点了？）&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;how long&lt;/td&gt;
&lt;td&gt;时长 / 长度&lt;/td&gt;
&lt;td&gt;How long does it take?（需要多长时间？）&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3&gt;（二）8 组人称代词 —— 明确指代关系&lt;/h3&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;人称&lt;/th&gt;
&lt;th&gt;主格&lt;/th&gt;
&lt;th&gt;宾格&lt;/th&gt;
&lt;th&gt;形容词性物主代词&lt;/th&gt;
&lt;th&gt;名词性物主代词&lt;/th&gt;
&lt;th&gt;反身代词&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;第一人称单数&lt;/td&gt;
&lt;td&gt;I&lt;/td&gt;
&lt;td&gt;me&lt;/td&gt;
&lt;td&gt;my&lt;/td&gt;
&lt;td&gt;mine&lt;/td&gt;
&lt;td&gt;myself&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;第一人称复数&lt;/td&gt;
&lt;td&gt;we&lt;/td&gt;
&lt;td&gt;us&lt;/td&gt;
&lt;td&gt;our&lt;/td&gt;
&lt;td&gt;ours&lt;/td&gt;
&lt;td&gt;ourselves&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;第二人称单 / 复数&lt;/td&gt;
&lt;td&gt;you&lt;/td&gt;
&lt;td&gt;you&lt;/td&gt;
&lt;td&gt;your&lt;/td&gt;
&lt;td&gt;yours&lt;/td&gt;
&lt;td&gt;yourself/yourselves&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;第三人称单数（男）&lt;/td&gt;
&lt;td&gt;he&lt;/td&gt;
&lt;td&gt;him&lt;/td&gt;
&lt;td&gt;his&lt;/td&gt;
&lt;td&gt;his&lt;/td&gt;
&lt;td&gt;himself&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;第三人称单数（女）&lt;/td&gt;
&lt;td&gt;she&lt;/td&gt;
&lt;td&gt;her&lt;/td&gt;
&lt;td&gt;her&lt;/td&gt;
&lt;td&gt;hers&lt;/td&gt;
&lt;td&gt;herself&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;第三人称单数（物）&lt;/td&gt;
&lt;td&gt;it&lt;/td&gt;
&lt;td&gt;it&lt;/td&gt;
&lt;td&gt;its&lt;/td&gt;
&lt;td&gt;its&lt;/td&gt;
&lt;td&gt;itself&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;第三人称复数&lt;/td&gt;
&lt;td&gt;they&lt;/td&gt;
&lt;td&gt;them&lt;/td&gt;
&lt;td&gt;their&lt;/td&gt;
&lt;td&gt;theirs&lt;/td&gt;
&lt;td&gt;themselves&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;三、时态 —— 动词的 “时间魔法”&lt;/h2&gt;
&lt;p&gt;英语共有 16 种时态，按 “时间轴”（现在、过去、将来、过去将来）和 “状态”（一般、进行、完成、完成进行）分为四大类：&lt;/p&gt;
&lt;h3&gt;（一）现在时态&lt;/h3&gt;
&lt;p&gt;一般现在时：主语 + 动词原形 / 第三人称单数（标志词：always, often, every day）例：She studies English every day.（她每天学英语。）&lt;/p&gt;
&lt;p&gt;现在进行时：主语 + am/is/are + 动词 - ing（标志词：now, look, listen）例：We are watching TV now.（我们正在看电视。）&lt;/p&gt;
&lt;p&gt;现在完成时：主语 + have/has + 过去分词（标志词：already, yet, ever）例：I have visited Beijing twice.（我去过北京两次。）&lt;/p&gt;
&lt;p&gt;现在完成进行时：主语 + have/has been + 动词 - ing（强调持续到现在的动作）例：She has been waiting for an hour.（她等了一个小时了。）&lt;/p&gt;
&lt;h3&gt;（二）过去时态&lt;/h3&gt;
&lt;p&gt;一般过去时：主语 + 动词过去式（标志词：yesterday, ago, last year）例：He went to the park yesterday.（他昨天去了公园。）&lt;/p&gt;
&lt;p&gt;过去进行时：主语 + was/were + 动词 - ing（标志词：at that time, when/while 引导的从句）例：They were playing basketball when it rained.（下雨时他们正在打篮球。）&lt;/p&gt;
&lt;p&gt;过去完成时：主语 + had + 过去分词（标志词：by + 过去时间）例：She had left before I arrived.（我到之前她已经走了。）&lt;/p&gt;
&lt;p&gt;过去完成进行时：主语 + had been + 动词 - ing（强调过去持续到过去某时的动作）例：He had been working here for 10 years before he retired.（退休前他在这里工作了 10 年。）&lt;/p&gt;
&lt;h3&gt;（三）将来时态&lt;/h3&gt;
&lt;p&gt;一般将来时：主语 + will/shall + 动词原形（标志词：tomorrow, next week）例：We will visit the museum tomorrow.（我们明天要去参观博物馆。）&lt;/p&gt;
&lt;p&gt;将来进行时：主语 + will be + 动词 - ing（强调将来某时正在进行的动作）例：She will be studying at 8 o&apos;clock tonight.（今晚 8 点她会在学习。）&lt;/p&gt;
&lt;p&gt;将来完成时：主语 + will have + 过去分词（标志词：by + 将来时间）例：By next year, I will have finished the project.（到明年，我将完成这个项目。）&lt;/p&gt;
&lt;p&gt;将来完成进行时：主语 + will have been + 动词 - ing（强调将来持续到某时的动作）例：They will have been living here for 5 years by next month.（到下个月，他们在这里住了 5 年了。）&lt;/p&gt;
&lt;h3&gt;（四）过去将来时态（以过去某时间为基准的 “将来”）&lt;/h3&gt;
&lt;p&gt;过去将来时：主语 + would + 动词原形（标志词：常用于宾语从句）例：He said he would come back soon.（他说他很快会回来。）&lt;/p&gt;
&lt;p&gt;过去将来进行时：主语 + would be + 动词 - ing例：She told me she would be waiting for me there.（她告诉我她会在那里等我。）&lt;/p&gt;
&lt;p&gt;过去将来完成时：主语 + would have + 过去分词例：He thought he would have finished the work by then.（他以为到那时他已经完成工作了。）&lt;/p&gt;
&lt;p&gt;过去将来完成进行时：主语 + would have been + 动词 - ing例：They knew they would have been studying for 3 hours by 9 o&apos;clock.（他们知道到 9 点他们会已经学习了 3 个小时。）&lt;/p&gt;
&lt;h2&gt;四、句子结构 —— 语法的 “骨架”&lt;/h2&gt;
&lt;h3&gt;（一）5 种简单句基本结构&lt;/h3&gt;
&lt;p&gt;主语 + 谓语（S+V）例：She laughs.（她笑了。）&lt;/p&gt;
&lt;p&gt;主语 + 谓语 + 宾语（S+V+O）例：I love English.（我爱英语。）&lt;/p&gt;
&lt;p&gt;主语 + 系动词 + 表语（S+Link.V+P）例：The cake tastes delicious.（蛋糕尝起来很美味。）&lt;/p&gt;
&lt;p&gt;主语 + 谓语 + 间接宾语 + 直接宾语（S+V+IO+DO）例：He gave me a book.（他给了我一本书。）&lt;/p&gt;
&lt;p&gt;主语 + 谓语 + 宾语 + 宾语补足语（S+V+O+C）例：We made him our monitor.（我们选他当班长。）&lt;/p&gt;
&lt;h3&gt;（二）3 大从句体系&lt;/h3&gt;
&lt;p&gt;名词性从句（包括主语从句、宾语从句、表语从句、同位语从句）例：What he said is true.（他说的是真的。）（主语从句）&lt;/p&gt;
&lt;p&gt;形容词性从句（定语从句）例：The book that I bought yesterday is interesting.（我昨天买的书很有趣。）&lt;/p&gt;
&lt;p&gt;副词性从句（状语从句，包括时间、地点、原因、条件、让步等）例：I will call you when I arrive.（我到了就给你打电话。）（时间状语从句）&lt;/p&gt;
&lt;h2&gt;五、语法细节：缩略词与时态标志词&lt;/h2&gt;
&lt;h3&gt;（一）常用缩略词 —— 口语与写作的 “简化工具”&lt;/h3&gt;
&lt;p&gt;主语 + be 动词：I&apos;m=I am, he&apos;s=he is, they&apos;re=they are&lt;/p&gt;
&lt;p&gt;否定形式：isn&apos;t=is not, aren&apos;t=are not, can&apos;t=cannot&lt;/p&gt;
&lt;p&gt;将来时：I&apos;ll=I will, we&apos;ll=we will, won&apos;t=will not&lt;/p&gt;
&lt;p&gt;其他：what&apos;s=what is, that&apos;s=that is, here&apos;s=here is&lt;/p&gt;
&lt;h3&gt;（二）时态标志词 —— 快速判断时态的 “信号灯”&lt;/h3&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;时态&lt;/th&gt;
&lt;th&gt;标志词&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;一般现在时&lt;/td&gt;
&lt;td&gt;always, often, usually, every day&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;一般过去时&lt;/td&gt;
&lt;td&gt;yesterday, ago, last week, in 2020&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;一般将来时&lt;/td&gt;
&lt;td&gt;tomorrow, next month, in the future&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;现在进行时&lt;/td&gt;
&lt;td&gt;now, look, listen, at present&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;过去进行时&lt;/td&gt;
&lt;td&gt;at that time, when/while 引导的从句&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;现在完成时&lt;/td&gt;
&lt;td&gt;already, yet, ever, never, since, for&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;六、句子成分解析：精准拆分句子&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;主语&lt;/strong&gt;：动作的发出者（例：She made her brother sad. 中 “She” 是主语）&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;宾语&lt;/strong&gt;：动作的承受者（例：I love apples. 中 “apples” 是宾语）&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;表语&lt;/strong&gt;：说明主语的状态或特征（例：He is a teacher. 中 “a teacher” 是表语）&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;定语&lt;/strong&gt;：修饰名词的成分（例：The red car is mine. 中 “red” 是定语）&lt;/p&gt;
&lt;h2&gt;结语：系统化学习，让语法不再难懂&lt;/h2&gt;
&lt;p&gt;英语语法体系看似复杂，实则是由一个个 “模块” 组成的逻辑系统。从字母到词性，从时态到句子结构，每一部分都是环环相扣的。对于零基础学习者来说，通过 “分模块整理 + 例句理解 + 刻意练习”，就能逐步搭建起完整的语法框架。记住，语法不是死记硬背的规则，而是帮助我们理解和运用英语的工具。&lt;/p&gt;
</content:encoded></item><item><title>研-计划</title><link>https://newpower.pro/posts/notebook/%E4%B8%AD%E5%B1%B1%E5%A4%A7%E5%AD%A6-%E7%A0%94-%E8%AE%A1%E5%88%92/</link><guid isPermaLink="true">https://newpower.pro/posts/notebook/%E4%B8%AD%E5%B1%B1%E5%A4%A7%E5%AD%A6-%E7%A0%94-%E8%AE%A1%E5%88%92/</guid><pubDate>Thu, 01 May 2025 00:00:00 GMT</pubDate><content:encoded>&lt;h2&gt;1. 基础阶段（2025 年 5 月 - 2026 年 12 月）&lt;/h2&gt;
&lt;h3&gt;目标：系统学习各科基础知识，构建知识框架&lt;/h3&gt;
&lt;h3&gt;数学（数一）&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;教材：《高等数学》（同济版）、《线性代数》（同济版）、《概率论与数理统计》（浙大版）。&lt;/li&gt;
&lt;li&gt;网课：张宇基础班（高数）、李永乐线代强化班、王式安概率论基础班。&lt;/li&gt;
&lt;li&gt;习题：《660 题》《基础过关 1000 题》，每周完成 2 个章节。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;英语（一）&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;词汇：每日背诵 50 个考研高频词（推荐《红宝书》）。&lt;/li&gt;
&lt;li&gt;语法：学习长难句分析（推荐田静《句句真研》）。&lt;/li&gt;
&lt;li&gt;阅读：精析 2005-2010 年真题阅读，每篇翻译并总结错题。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;专业课（408）&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;教材：《数据结构》（严蔚敏）、《计算机组成原理》（唐朔飞）、《操作系统》（汤小丹）、《计算机网络》（谢希仁）。&lt;/li&gt;
&lt;li&gt;网课：王道考研基础班，配套《王道考研复习指导书》。&lt;/li&gt;
&lt;li&gt;练习：完成教材课后习题，整理思维导图。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;2. 强化阶段（2027 年 1 月 - 2027 年 6 月）&lt;/h2&gt;
&lt;h3&gt;目标：深化重点难点，提高解题速度&lt;/h3&gt;
&lt;h3&gt;数学&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;习题：《张宇 18 讲》《李林 880 题》，重点突破中高难度题型。&lt;/li&gt;
&lt;li&gt;真题：限时完成 2000-2015 年真题，每周 2 套，分析错题。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;英语&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;阅读：精析 2011-2020 年真题，总结阅读技巧（如定位法、排除法）。&lt;/li&gt;
&lt;li&gt;写作：背诵 10 篇大作文模板，每周练习 1 篇。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;专业课&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;真题：完成 2009-2018 年 408 真题，总结高频考点（如数据结构中的算法设计、计组中的流水线计算）。&lt;/li&gt;
&lt;li&gt;模拟题：做《王道模拟 8 套卷》，训练答题时间分配。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;3. 冲刺阶段（2027 年 7 月 - 2027 年 12 月）&lt;/h2&gt;
&lt;h3&gt;目标：模拟实战，查漏补缺&lt;/h3&gt;
&lt;h3&gt;数学&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;真题：二刷 2016-2022 年真题，重点关注近 5 年新题型。&lt;/li&gt;
&lt;li&gt;模拟题：做《李林 6+4 套卷》《合工大超越卷》，保持题感。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;英语&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;模考：每周全真模拟 1 套真题（含作文），严格限时 3 小时。&lt;/li&gt;
&lt;li&gt;翻译：练习 2010-2020 年真题翻译，总结翻译技巧。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;专业课&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;真题：三刷 408 真题，重点突破薄弱环节（如操作系统中的进程调度、计算机网络中的 TCP 协议）。&lt;/li&gt;
&lt;li&gt;复试准备：提前学习离散数学（推荐《离散数学及其应用》）和 C 语言（推荐《C Primer Plus》），为复试笔试做准备。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;政治&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;教材：《肖秀荣精讲精练》《1000 题》。&lt;/li&gt;
&lt;li&gt;网课：徐涛强化班（马原、毛中特）。&lt;/li&gt;
&lt;li&gt;冲刺：11 月开始背诵《肖四》《肖八》，关注时政热点。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;时间管理&lt;/h2&gt;
&lt;h3&gt;每日规划&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;数学：3 小时（1.5 小时网课 + 1.5 小时习题）。&lt;/li&gt;
&lt;li&gt;英语：2 小时（1 小时单词 + 1 小时阅读）。&lt;/li&gt;
&lt;li&gt;专业课：3 小时（2 小时网课 + 1 小时习题）。&lt;/li&gt;
&lt;li&gt;政治：1 小时（后期增加至 2 小时）。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;每周总结&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;周日上午复盘本周学习进度，调整下周计划。&lt;/li&gt;
&lt;li&gt;整理错题本，标注易错知识点。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;资源推荐&lt;/h2&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;科目&lt;/th&gt;
&lt;th&gt;推荐资料&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;数学&lt;/td&gt;
&lt;td&gt;《张宇考研数学基础 30 讲》《李林考研数学 880 题》《历年真题详解》&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;英语&lt;/td&gt;
&lt;td&gt;《考研英语长难句解密》《考研英语高分写作》《黄皮书真题解析》&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;专业课&lt;/td&gt;
&lt;td&gt;《王道考研复习指导书》《天勤计算机考研高分笔记》《408 真题解析》&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;政治&lt;/td&gt;
&lt;td&gt;《肖秀荣精讲精练》《徐涛冲刺背诵笔记》《肖四肖八》&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
</content:encoded></item><item><title>Git变基合并</title><link>https://newpower.pro/posts/notebook/git/git%E5%8F%98%E5%9F%BA%E5%90%88%E5%B9%B6/</link><guid isPermaLink="true">https://newpower.pro/posts/notebook/git/git%E5%8F%98%E5%9F%BA%E5%90%88%E5%B9%B6/</guid><pubDate>Thu, 19 Nov 2020 17:43:57 GMT</pubDate><content:encoded>&lt;h2&gt;说明&lt;/h2&gt;
&lt;p&gt;以下 &lt;code&gt;v2&lt;/code&gt; 是某个需求的开发分支， &lt;code&gt;dev&lt;/code&gt;是总的开发分支，&lt;code&gt;v2&lt;/code&gt; 是基于&lt;code&gt;dev&lt;/code&gt;分支签出的。&lt;/p&gt;
&lt;p&gt;当完成&lt;code&gt;v2&lt;/code&gt;的开发后，需要把代码合并到&lt;code&gt;dev&lt;/code&gt;，我们可以使用&lt;code&gt;rebase&lt;/code&gt;进行合并：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# 首先将 v2 push到远程仓库
git add .
git commit -m &apos;xxx&apos;
git push origin v2

# 切换到 dev 拉取最新代码
git checkout dev
git pull origin dev

# 切换到 v2
git checkout v2
git rebase dev # 将 v2 的所有[commit] 变基到(应用到) dev

# 切换到 dev
git checkout dev
git merge v2  # 将 dev分支 快进合并 （此时 (HEAD -&amp;gt; dev, v2) [commit] 两个分支指向同一个提交）

# 查看 原v2的[commit]记录 是否在dev分支的最前面（变基成功会把v2的提交记录应用到dev分支的最前面）
git log

 # 如果到这一步发现有问题，尝试使用 git --abort中止变基，如果还是有问题的可以在dev分支上使用《后悔药》操作， 再到v2分支上使用《后悔药》操作，即可使两个分支都回退到 rebase变基 之前的状态

# 试运行项目是否有问题
yarn start

git status # 查看状态是否有问题
git push origin dev # 推送到远程仓库的 dev

&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;变基要遵守的准则&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;几个人同时在一个分支上进行开发和提交时，开发中途请不要私自执行变基，只有在大家都完成工作之后才可以执行变基。&lt;/strong&gt;&lt;/p&gt;
&lt;h3&gt;变基的实质&lt;/h3&gt;
&lt;p&gt;变基操作的实质是丢弃一些现有的提交，然后相应地新建一些内容一样但实际上不同的提交。
因此，&lt;strong&gt;变基操作过后的分支将不要再使用&lt;/strong&gt;。&lt;/p&gt;
&lt;h2&gt;后悔药&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;# 查看HEAD指针变动记录
git reflog
# 记录示例(当前分支是v2):
07c398f (HEAD -&amp;gt; v2, master) HEAD@{0}: checkout: moving from master to v2
07c398f (HEAD -&amp;gt; v2, master) HEAD@{1}: rebase (finish): returning to refs/heads/master
07c398f (HEAD -&amp;gt; v2, master) HEAD@{2}: rebase (start): checkout v2
15a97d8 HEAD@{3}: reset: moving to 15a97d8
07c398f (HEAD -&amp;gt; v2, master) HEAD@{4}: merge v2: Fast-forward
15a97d8 HEAD@{5}: checkout: moving from v2 to master
07c398f (HEAD -&amp;gt; v2, master) HEAD@{6}: rebase (finish): returning to refs/heads/v2
07c398f (HEAD -&amp;gt; v2, master) HEAD@{7}: rebase (pick): C
15a97d8 HEAD@{8}: rebase (start): checkout master # 首次rebase
d278ecd HEAD@{9}: checkout: moving from master to v2 # rebase前的状态
15a97d8 HEAD@{10}: commit: D

# 可见，示例中最初的 rebase 操作是 HEAD@{8}，想回退到变基前的状态需让指针指向 HEAD@{9}
git reset --hard d278ecd  # 重置当前分支的HEAD为指定[commit]，同时重置暂存区和工作区，与指定[commit]一致

# 此时打印 log 查看是否回到之前的状态
git log
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;注意：此操作只能回退当前的分支，如其他分支也要回退，需要切换到该分支并执行上面操作。&lt;/strong&gt;&lt;/p&gt;
&lt;h2&gt;开发期间的rebase操作&lt;/h2&gt;
&lt;h3&gt;背景&lt;/h3&gt;
&lt;p&gt;有两个分支：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;dev
*v2
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;v2&lt;/code&gt; 是基于&lt;code&gt;dev&lt;/code&gt;切出来的。&lt;/p&gt;
&lt;p&gt;提交记录如下：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;  dev
a - b - c
  v2
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;开发期间，两个分支同时有新的commit ：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;    dev
a - b - c - d - e
  \ - f - g
    v2
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;当前你正在&lt;code&gt;v2&lt;/code&gt;进行开发，&lt;code&gt;dev&lt;/code&gt;也同时进行开发，并有重大的改变，你需要把&lt;code&gt;dev&lt;/code&gt;的提交同步到&lt;code&gt;v2&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;需求： 把&lt;code&gt;dev&lt;/code&gt;中新的提交同步到&lt;code&gt;v2&lt;/code&gt;，且不能影响&lt;code&gt;dev&lt;/code&gt;分支。&lt;/strong&gt;&lt;/p&gt;
&lt;h3&gt;操作步骤&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;基于最新的 &lt;code&gt;dev&lt;/code&gt; 切一个新的分支 &lt;code&gt;dev-copy&lt;/code&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;dev-copy&lt;/code&gt; 和 &lt;code&gt;dev&lt;/code&gt;  两者的 commit ID 一致。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;在&lt;code&gt;dev-copy&lt;/code&gt;中执行rebase，将 &lt;code&gt;dev-copy&lt;/code&gt; 的提交变基到 &lt;code&gt;v2&lt;/code&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;git rebase v2 # 将 dev-copy 的提交[commit] 变基到(应用到) v2
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;删除原&lt;code&gt;v2&lt;/code&gt;分支，将&lt;code&gt;dev-copy&lt;/code&gt;分支名改为&lt;code&gt;v2&lt;/code&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# 当前在 dev-copy 分支
git branch -d v2 # 删除分支
git branch -m dev-copy v2 # 重命名
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;git cherry-pick&lt;/h2&gt;
&lt;p&gt;来源：&lt;a href=&quot;http://www.ruanyifeng.com/blog/2020/04/git-cherry-pick.html&quot;&gt;《git cherry-pick 教程》&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;用于将单个或几个&lt;code&gt;[commit]&lt;/code&gt;复制到另一个分支。&lt;/p&gt;
&lt;h3&gt;基本应用&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;git cherry-pick &amp;lt;commitHash&amp;gt; # 将commitHash应用于当前分支
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;上面命令就会将指定的提交&lt;code&gt;commitHash&lt;/code&gt;，应用于当前分支。这会在当前分支产生一个新的提交，当然它们的&lt;strong&gt;哈希值会不一样&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;git cherry-pick命令的参数，不一定是提交的哈希值，分支名也是可以的，表示转移该分支的最新提交。&lt;/p&gt;
&lt;h3&gt;转移多个提交&lt;/h3&gt;
&lt;p&gt;Cherry pick 支持一次转移多个提交。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;git cherry-pick &amp;lt;HashA&amp;gt; &amp;lt;HashB&amp;gt; # A和B提交
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;上面的命令将 A 和 B 两个提交应用到当前分支。这会在当前分支生成两个对应的新提交。&lt;/p&gt;
&lt;p&gt;如果想要转移一系列的连续提交，可以使用下面的简便语法。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;git cherry-pick A..B # A到B提交，不包含A
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;上面的命令可以转移从 A 到 B 的所有提交。它们必须按照正确的顺序放置：提交 A 必须早于提交 B，否则命令将失败，但不会报错。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;注意，使用上面的命令，提交 A 将不会包含在 Cherry pick 中。如果要包含提交 A，可以使用下面的语法。&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;git cherry-pick A^..B # A到B提交，包含A
&lt;/code&gt;&lt;/pre&gt;
</content:encoded></item><item><title>常用Git命令清单</title><link>https://newpower.pro/posts/notebook/git/%E5%B8%B8%E7%94%A8git%E5%91%BD%E4%BB%A4%E6%B8%85%E5%8D%95/</link><guid isPermaLink="true">https://newpower.pro/posts/notebook/git/%E5%B8%B8%E7%94%A8git%E5%91%BD%E4%BB%A4%E6%B8%85%E5%8D%95/</guid><pubDate>Wed, 18 Nov 2020 17:43:57 GMT</pubDate><content:encoded>&lt;p&gt;一般来说，日常使用只要记住下图6个命令，就可以了。但是熟练使用，恐怕要记住60～100个命令。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://www.ruanyifeng.com/blogimg/asset/2015/bg2015120901.png&quot; alt=&quot;img&quot; /&gt;&lt;/p&gt;
&lt;p&gt;下面是我整理的常用 Git 命令清单。几个专用名词的译名如下。&lt;/p&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;Workspace：工作区&lt;/li&gt;
&lt;li&gt;Index / Stage：暂存区&lt;/li&gt;
&lt;li&gt;Repository：仓库区（或本地仓库）&lt;/li&gt;
&lt;li&gt;Remote：远程仓库&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;h2&gt;一、新建代码库&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;# 在当前目录新建一个Git代码库
$ git init

# 新建一个目录，将其初始化为Git代码库
$ git init [project-name]

# 下载一个项目和它的整个代码历史
$ git clone [url]
&lt;/code&gt;&lt;/pre&gt;
&lt;h2&gt;二、配置&lt;/h2&gt;
&lt;p&gt;Git的设置文件为&lt;code&gt;.gitconfig&lt;/code&gt;，它可以在用户主目录下（全局配置），也可以在项目目录下（项目配置）。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# 显示当前的Git配置
$ git config --list

# 编辑Git配置文件
$ git config -e [--global]

# 设置提交代码时的用户信息
$ git config [--global] user.name &quot;[name]&quot;
$ git config [--global] user.email &quot;[email address]&quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;h2&gt;三、增加/删除文件&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;# 添加指定文件到暂存区
$ git add [file1] [file2] ...

# 添加指定目录到暂存区，包括子目录
$ git add [dir]

# 添加当前目录的所有文件到暂存区
$ git add .

# 添加每个变化前，都会要求确认
# 对于同一个文件的多处变化，可以实现分次提交
$ git add -p

# 删除工作区文件，并且将这次删除放入暂存区
$ git rm [file1] [file2] ...

# 停止追踪指定文件，但该文件会保留在工作区
$ git rm --cached [file]

# 改名文件，并且将这个改名放入暂存区
$ git mv [file-original] [file-renamed]
&lt;/code&gt;&lt;/pre&gt;
&lt;h2&gt;四、代码提交&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;# 提交暂存区到仓库区
$ git commit -m [message]

# 提交暂存区的指定文件到仓库区
$ git commit [file1] [file2] ... -m [message]

# 提交工作区自上次commit之后的变化，直接到仓库区
$ git commit -a

# 提交时显示所有diff信息
$ git commit -v

# 使用一次新的commit，替代上一次提交
# 如果代码没有任何新变化，则用来改写上一次commit的提交信息
$ git commit --amend -m [message]

# 重做上一次commit，并包括指定文件的新变化
$ git commit --amend [file1] [file2] ...
&lt;/code&gt;&lt;/pre&gt;
&lt;h2&gt;五、分支&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;# 列出所有本地分支
$ git branch

# 列出所有远程分支
$ git branch -r

# 列出所有本地分支和远程分支
$ git branch -a

# 新建一个分支，但依然停留在当前分支
$ git branch [branch-name]

# 新建一个分支，并切换到该分支
$ git checkout -b [branch]

# 新建一个分支，指向指定commit
$ git branch [branch] [commit]

# 新建一个分支，与指定的远程分支建立追踪关系
$ git branch --track [branch] [remote-branch]

# 切换到指定分支，并更新工作区
$ git checkout [branch-name]

# 切换到上一个分支
$ git checkout -

# 建立追踪关系，在现有分支与指定的远程分支之间
$ git branch --set-upstream [branch] [remote-branch]

# 合并指定分支到当前分支
$ git merge [branch]

# 选择一个commit，合并进当前分支
$ git cherry-pick [commit]

# 删除分支
$ git branch -d [branch-name]

# 删除远程分支
$ git push origin --delete [branch-name]
$ git branch -dr [remote/branch]
&lt;/code&gt;&lt;/pre&gt;
&lt;h2&gt;六、标签&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;# 列出所有tag
$ git tag

# 新建一个tag在当前commit
$ git tag [tag]

# 新建一个tag在指定commit
$ git tag [tag] [commit]

# 删除本地tag
$ git tag -d [tag]

# 删除远程tag
$ git push origin :refs/tags/[tagName]

# 查看tag信息
$ git show [tag]

# 提交指定tag
$ git push [remote] [tag]

# 提交所有tag
$ git push [remote] --tags

# 新建一个分支，指向某个tag
$ git checkout -b [branch] [tag]
&lt;/code&gt;&lt;/pre&gt;
&lt;h2&gt;七、查看信息&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;# 显示有变更的文件
$ git status

# 显示当前分支的版本历史
$ git log

# 显示commit历史，以及每次commit发生变更的文件
$ git log --stat

# 搜索提交历史，根据关键词
$ git log -S [keyword]

# 显示某个commit之后的所有变动，每个commit占据一行
$ git log [tag] HEAD --pretty=format:%s

# 显示某个commit之后的所有变动，其&quot;提交说明&quot;必须符合搜索条件
$ git log [tag] HEAD --grep feature

# 显示某个文件的版本历史，包括文件改名
$ git log --follow [file]
$ git whatchanged [file]

# 显示指定文件相关的每一次diff
$ git log -p [file]

# 显示过去5次提交
$ git log -5 --pretty --oneline

# 显示所有提交过的用户，按提交次数排序
$ git shortlog -sn

# 显示指定文件是什么人在什么时间修改过
$ git blame [file]

# 显示暂存区和工作区的差异
$ git diff

# 显示暂存区和上一个commit的差异
$ git diff --cached [file]

# 显示工作区与当前分支最新commit之间的差异
$ git diff HEAD

# 显示两次提交之间的差异
$ git diff [first-branch]...[second-branch]

# 显示今天你写了多少行代码
$ git diff --shortstat &quot;@{0 day ago}&quot;

# 显示某次提交的元数据和内容变化
$ git show [commit]

# 显示某次提交发生变化的文件
$ git show --name-only [commit]

# 显示某次提交时，某个文件的内容
$ git show [commit]:[filename]

# 显示当前分支的最近几次提交
$ git reflog
&lt;/code&gt;&lt;/pre&gt;
&lt;h2&gt;八、远程同步&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;# 下载远程仓库的所有变动
$ git fetch [remote]

# 显示所有远程仓库
$ git remote -v

# 显示某个远程仓库的信息
$ git remote show [remote]

# 增加一个新的远程仓库，并命名
$ git remote add [shortname] [url]

# 取回远程仓库的变化，并与本地分支合并
$ git pull [remote] [branch]

# 上传本地指定分支到远程仓库
$ git push [remote] [branch]

# 强行推送当前分支到远程仓库，即使有冲突
$ git push [remote] --force

# 推送所有分支到远程仓库
$ git push [remote] --all
&lt;/code&gt;&lt;/pre&gt;
&lt;h2&gt;九、撤销&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;# 恢复暂存区的指定文件到工作区
$ git checkout [file]

# 恢复某个commit的指定文件到暂存区和工作区
$ git checkout [commit] [file]

# 恢复暂存区的所有文件到工作区
$ git checkout .

# 重置暂存区的指定文件，与上一次commit保持一致，但工作区不变
$ git reset [file]

# 重置暂存区与工作区，与上一次commit保持一致
$ git reset --hard

# 重置当前分支的指针为指定commit，同时重置暂存区，但工作区不变
$ git reset [commit]

# 重置当前分支的HEAD为指定commit，同时重置暂存区和工作区，与指定commit一致
$ git reset --hard [commit]

# 重置当前HEAD为指定commit，但保持暂存区和工作区不变
$ git reset --keep [commit]

# 新建一个commit，用来撤销指定commit
# 后者的所有变化都将被前者抵消，并且应用到当前分支
$ git revert [commit]

# 暂时将未提交的变化移除，稍后再移入
$ git stash
$ git stash pop
&lt;/code&gt;&lt;/pre&gt;
&lt;h2&gt;十、常用操作组合&lt;/h2&gt;
&lt;h3&gt;1. 修改本地分支名和远程分支名&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;git branch -m old_branch new_branch # 重命名本地分支
git push origin :old_branch # 删除远程旧分支（分支名前有冒号）
git push --set-upstream origin new_branch # 推送新的分支，并设置本地分支跟踪新的远程分支
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;相关文章：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://www.ruanyifeng.com/blog/2019/12/git-undo.html&quot;&gt;《如何撤销 Git 操作？》&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://www.ruanyifeng.com/blog/2020/04/git-cherry-pick.html&quot;&gt;《git cherry-pick 教程》&lt;/a&gt; 复制某分支上的部分提交到另一个分支上（相对于可以选择指定提交的 rebase 操作）。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;命令清单来源：https://www.ruanyifeng.com/blog/2015/12/git-cheat-sheet.html&lt;/p&gt;
&lt;/blockquote&gt;
</content:encoded></item></channel></rss>