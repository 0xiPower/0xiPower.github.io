<?xml version="1.0" encoding="UTF-8"?><rss version="2.0" xmlns:content="http://purl.org/rss/1.0/modules/content/"><channel><title>☯️xPower</title><description>Life is a fxxking movie.</description><link>https://newpower.pro/</link><language>zh_CN</language><item><title>随笔2025-05-08</title><link>https://newpower.pro/posts/notebook/2025-05-08/</link><guid isPermaLink="true">https://newpower.pro/posts/notebook/2025-05-08/</guid><pubDate>Thu, 08 May 2025 00:00:00 GMT</pubDate><content:encoded>&lt;h2&gt;🎁【开箱惊喜】HackQuest x Arbitrum共学营结营礼物大公开&lt;/h2&gt;
&lt;p&gt;激动的心，颤抖的手，终于收到了HackQuest和Arbitrum共学营的结营礼物！🎉&lt;br /&gt;
开箱的瞬间，满满的惊喜和感动，每一件小物都充满了心意和创意。🎨&lt;br /&gt;
👜 帆布袋：简约而不简单，上面的图案超级可爱，日常出门必备单品！&lt;br /&gt;
🔑 钥匙扣：设计感十足，细节满满，每次拿出钥匙都能想起这段难忘的学习旅程。&lt;br /&gt;
📚 笔记本：记录学习的点滴，每一页都是成长的见证。&lt;br /&gt;
🎖️ 徽章：每一枚都是对努力的肯定，也是对未来的期许。&lt;br /&gt;
这份礼物不仅是对过去努力的肯定，更是对未来的鼓励。感谢HackQuest和Arbitrum，让我在学习的道路上不断前行！🚀&lt;br /&gt;
Let&apos;s Quack!!!!!!!!!!!!!!!!!!!!!!!!!!&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://asset-repository.vercel.app/blog/library/H00001.jpg&quot; alt=&quot;alt text&quot; /&gt;
&lt;img src=&quot;https://asset-repository.vercel.app/blog/library/H00002.jpg&quot; alt=&quot;alt text&quot; /&gt;&lt;/p&gt;
</content:encoded></item><item><title>Arbitrum Stylus 简要说明与使用教程</title><link>https://newpower.pro/posts/blockchain/arbitrum/arbitrumstylustutorial/</link><guid isPermaLink="true">https://newpower.pro/posts/blockchain/arbitrum/arbitrumstylustutorial/</guid><pubDate>Thu, 08 May 2025 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;Arbitrum Stylus 是 Arbitrum 网络中的一项新型功能，旨在为智能合约开发者提供更灵活、更高性能的工具。它打破了传统 EVM 框架中只能使用 Solidity 的限制，使得开发者可以借助多种编程语言（如 C、C++、Rust 等）在 Arbitrum 上编写合约，从而提升可扩展性与开发效率。根据官方文档和不同社区的测试，Stylus 在性能和资源利用率方面具有一定优势，引起了广泛关注。本文将结合官方资料和社区经验，为读者提供一份简要的使用指南。&lt;/p&gt;
&lt;h2&gt;一、背景与原理&lt;/h2&gt;
&lt;h3&gt;1.1 传统 EVM 的局限&lt;/h3&gt;
&lt;p&gt;以太坊虚拟机（EVM）为智能合约生态提供了基础支撑，但其在性能与多语言支持上存在局限。这些局限使得编写与部署高性能合约的过程较为艰难，尤其在涉及复杂业务逻辑或者需要高吞吐量时。&lt;/p&gt;
&lt;p&gt;在深入讨论之前，需要进一步了解 Stylus 引擎与 Arbitrum Rollup 之间的协同工作方式。Stylus 背后的核心思路是将多语言编译产物转换为与 Arbitrum VM 兼容的字节码，并利用 Arbitrum 的 Rollup 机制实现高吞吐量的交易打包与提交。同时，Stylus 还注重可维护性，对跨语言交互和数据结构格式进行了适配，让不同语言实现的逻辑能在同一合约生态中顺畅调用与组合。这为复杂场景下的风险控制与扩展提供了创新空间。&lt;/p&gt;
&lt;h3&gt;1.2 Arbitrum 与 Layer 2 扩容&lt;/h3&gt;
&lt;p&gt;Arbitrum 作为一种 Layer 2 解决方案，在主链上通过汇总批量交易来降低 Gas 成本并提高可扩展性。它利用了自己的执行环境，同时通过 Rollup 技术将交易数据安全地记录在以太坊上，实现高效与安全的平衡。&lt;/p&gt;
&lt;h3&gt;1.3 Stylus 的引入&lt;/h3&gt;
&lt;p&gt;在此基础上，Arbitrum 推出了 Stylus，实现了对多种系统级语言编写智能合约的支持。与传统 EVM 合约相比，Stylus 合约运行在与 Arbitrum 兼容的环境中，利用字节码级的方式整合 Rust、C/C++ 等语言所编译生成的构件。这使得开发者可在熟悉的语言中进行编程，并在 Arbitrum 上享受更高的吞吐量与灵活性。&lt;/p&gt;
&lt;hr /&gt;
&lt;h2&gt;二、技术特性与优势&lt;/h2&gt;
&lt;h3&gt;2.1 多语言支持&lt;/h3&gt;
&lt;p&gt;Stylus 最突出的特性是能够使用多种语言编写合约，包括 Rust、C、C++ 等。通过官方提供的 SDK（如 &lt;a href=&quot;https://github.com/OffchainLabs/stylus-sdk-rs&quot;&gt;OffchainLabs/stylus-sdk-rs&lt;/a&gt;），开发者可以将本地项目编译为 Stylus 兼容的格式，再部署到 Arbitrum 网络。&lt;/p&gt;
&lt;p&gt;通过 Stylus，开发者在获取底层性能的同时也能灵活使用多样化的编程范式，例如 Rust 中的所有权模型、C++ 强调的面向对象特性等。在传统 EVM 框架下，一些高级语言特性往往需要手动转换为 Solidity 能接受的形式，但在 Stylus 中，此类操作可得到一定的简化。尤其在涉及大量运算或自定义内存结构时，多语言的支持可显著降低开发难度、提高执行效率。在部署环节，官方提供的编译流程也在不断完善，以尽量减轻对开发者的门槛。&lt;/p&gt;
&lt;h3&gt;2.2 高性能与低成本&lt;/h3&gt;
&lt;p&gt;据官方及社区的基准测试（参考 &lt;a href=&quot;https://arbitrum.io/stylus&quot;&gt;Arbitrum 官方文档&lt;/a&gt; 与 &lt;a href=&quot;https://docs.welldonestudio.io/tutorials/arbitrum-stylus-benchmark&quot;&gt;Arbitrum Stylus Benchmark&lt;/a&gt;），Stylus 合约在同等操作下往往可以实现较低的 Gas 消耗，同时保有更快的执行速度。尤其当合约逻辑复杂时，使用系统级语言可能在内存管理、计算等方面带来效率收益。&lt;/p&gt;
&lt;h3&gt;2.3 合约可组合性&lt;/h3&gt;
&lt;p&gt;除了性能的提升，Arbitrum Stylus 也关注与其他协议的交互和可组合性。正如 &lt;a href=&quot;https://fishyonchain.medium.com/arbitrum-stylus-a-new-standard-for-smart-contract-composability-2c5c3679ca20&quot;&gt;Fishyonchain 的文章&lt;/a&gt; 中所述，Stylus 将使复杂协议在合约层面的互操作变得更加容易，可在更多场景下实现与 DeFi、NFT 或其他 Layer 2 协议的联动。&lt;/p&gt;
&lt;h3&gt;2.4 与 Arbitrum 生态的融合&lt;/h3&gt;
&lt;p&gt;Stylus 充分利用了 Arbitrum 在 Layer 2 的技术栈，依托安全性与高吞吐量的基础，提供易于使用的接口。它既能与传统的 EVM 合约配合，实现资源共享和模块化部署，也能独立运行基于系统级语言的业务逻辑，兼具灵活性和兼容性。&lt;/p&gt;
&lt;hr /&gt;
&lt;h2&gt;三、基础使用流程&lt;/h2&gt;
&lt;h3&gt;3.1 环境准备&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;编译工具链&lt;/strong&gt;：确保安装适用于目标语言（Rust/C/C++）的编译器，如进行 Rust 开发时，需要安装 &lt;code&gt;rustup&lt;/code&gt; 并设置好相应的 nightly 工具链。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Arbitrum 节点或测试网络&lt;/strong&gt;：可选择官方提供的 Rollup 测试环境，或者在本地搭建一个 Arbitrum 节点，用于对合约进行本地测试。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;SDK 获取&lt;/strong&gt;：从 &lt;a href=&quot;https://github.com/OffchainLabs/stylus-sdk-rs&quot;&gt;OffchainLabs/stylus-sdk-rs&lt;/a&gt; 克隆或下载最新版本的 Stylus SDK，并按照文档指引进行安装和配置。&lt;/li&gt;
&lt;/ol&gt;
&lt;h3&gt;3.2 编写 Stylus 合约&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;项目初始化&lt;/strong&gt;：以 Rust 为例，可使用 &lt;code&gt;cargo new&lt;/code&gt; 命令创建新项目。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;实现业务逻辑&lt;/strong&gt;：在项目中编写具体的函数和数据结构，并保证符合 Stylus 运行环境的适配要求（如入口函数、内存管理、回调等）。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;测试与调试&lt;/strong&gt;：在本地通过编译工具链测试代码逻辑，使用官方或社区提供的测试框架检查合约行为。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;对于开发者而言，除了要掌握基本的 Rust 或 C/C++ 语法外，还需理解 Stylus 合约如何与 Arbitrum 上的其他合约进行信息交互。例如，与传统 EVM 合约之间的调用方式会包含一层 Stylus 专用的编解码步骤，确保映射到通用的字节码接口后双方能够正确接收与发送数据。同时，合约内部需要对 Gas 成本保持敏感，因为虽然 Stylus 有潜在的费用和性能优势，但不合理的逻辑仍可能导致资源浪费。&lt;/p&gt;
&lt;h3&gt;3.3 编译与部署&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;编译生成字节码&lt;/strong&gt;：按照 Stylus SDK 的说明，将 Rust/C/C++ 源码编译为 Stylus 兼容的字节码包。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;部署脚本&lt;/strong&gt;：使用 Arbitrum 提供的 CLI 工具或 Web 界面，将生成的字节码合约部署到测试网或主网。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;合约交互&lt;/strong&gt;：完成部署后，即可通过 Arbitrum 的 RPC 或者兼容的工具（如 Hardhat、Foundry 等），对合约方法进行调用或阅读合约状态。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;在部署合约时，需要注意目标链所在的网络环境，如测试网或主网。为了在测试环境中更快地迭代，开发者可借助 Arbitrum 提供的公共测试网，或本地模拟环境，先完成初步验证和调试，再通过官方 CLI 或者第三方工具进行正式部署。部署后，可使用类似 Hardhat 或 Foundry 等工具与合约进行交互、测试调用结果，并借助区块浏览器或监控服务查看合约执行的细节与统计信息。&lt;/p&gt;
&lt;hr /&gt;
&lt;h2&gt;四、使用示例&lt;/h2&gt;
&lt;p&gt;以下为一个极简的 Rust 示例，仅用于演示合约编写逻辑与部署方式（具体可参考官方 &lt;a href=&quot;https://docs.arbitrum.io/stylus/gentle-introduction&quot;&gt;Gentle Introduction&lt;/a&gt; 及相关文档）：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;// 假设在 main.rs 中使用 Rust 编写
fn main() {
    // 在 Stylus 中执行的简单示例逻辑
    // 例如：读取输入参数、执行一些计算，然后返回结果
    let result = add(2, 3);
    println!(&quot;Execution result: {}&quot;, result);
}

fn add(a: i32, b: i32) -&amp;gt; i32 {
    a + b
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;下方的示例仅仅展示了一个最简化的 Rust 主函数，但在真正的 Stylus 合约中，我们往往会定义多种接口函数和业务逻辑模块，并通过 SDK 中的 ABI 适配层来处理对外接口。很多情况下，需要结合链下数据进行混合计算或操作，例如通过 Oracles 获取价格信息，再在合约内执行精准的数值运算。正是这些对多语言特性的需求，促使 Stylus 的开发与演进。&lt;/p&gt;
&lt;p&gt;在完成本地测试后，通过 Stylus SDK 对项目进行打包并部署，即可在 Arbitrum 网络中与该合约进行交互。&lt;/p&gt;
&lt;hr /&gt;
&lt;h2&gt;五、常见问题与未来展望&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;合约审计&lt;/strong&gt;：虽然 Stylus 提供多语言支持，但依然需要对合约逻辑、边界条件和安全隐患进行审计。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;生态工具链&lt;/strong&gt;：Stylus 属于新兴技术，其可用的调试工具、框架与库仍在快速迭代，未来可能会出现更丰富的开发工具与最佳实践。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;与 EVM 的共存&lt;/strong&gt;：Stylus 并非取代 EVM，而是与 EVM 合约共同存在，为开发者提供多元化选择。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;性能与可扩展性&lt;/strong&gt;：后续官方或社区仍会进行深入优化，包含编译器层面和执行引擎层面的改进，提升整体性能。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;另外，由于 Stylus 仍处于积极的迭代阶段，合约安全审核和工具链测试必须引起足够的重视。开发者在正式发布前，应该借鉴常见的漏洞分析方法，对可能出现的越界读写、内存泄漏或函数访问控制不当等问题进行排查。随着社区的不断壮大，更多的审计机构和开发团队也将逐步建立完善的最佳实践与范式。未来，随着在合规性与易用性方面的改进，Stylus 将有望进一步融入主流 Layer 2 生态。&lt;/p&gt;
&lt;hr /&gt;
&lt;h2&gt;六、参考资料&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://arbitrum.io/stylus&quot;&gt;Arbitrum 官方介绍&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://docs.arbitrum.io/stylus/gentle-introduction&quot;&gt;Arbitrum Stylus Gentle Introduction&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://docs.welldonestudio.io/tutorials/arbitrum-stylus-benchmark&quot;&gt;Arbitrum Stylus Benchmark&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://fishyonchain.medium.com/arbitrum-stylus-a-new-standard-for-smart-contract-composability-2c5c3679ca20&quot;&gt;Fishyonchain: Stylus 可组合性文章&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/OffchainLabs/stylus-sdk-rs&quot;&gt;Stylus SDK (Rust)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;通过上述资料，可以进一步深入了解 Stylus 的实现原理与应用场景。总之，Arbitrum Stylus 集多语言支持、执行效率与安全性于一体，为智能合约开发者提供了新的选择。希望本教程能为初次接触本技术的读者带来帮助，后续可持续关注官方与社区的更新，及时掌握最新功能与最佳实践。&lt;/p&gt;
&lt;p&gt;对于那些希望通过多语言能力来提升合约可读性与可维护性的团队而言，Stylus 的出现无疑是一个重要机遇。它不仅扩大了人才储备的范围，也为各类新型用例提供了技术可行性。在具体应用上，无论是对 NFT 协议进行技术创新，还是实现更加复杂的金融衍生品逻辑，都可以充分利用多语言编程带来的灵活性。未来，借助社区的力量，Stylus 有望提供更齐全的库与开发框架来支撑大型项目的持续迭代与运行。&lt;/p&gt;
&lt;p&gt;希望本文能为读者提供一个清晰的 Stylus 入门指南，帮助大家在 Arbitrum 生态中更好地发挥多语言编程的优势。随着技术的不断发展，Stylus 将在智能合约领域扮演越来越重要的角色。&lt;/p&gt;
</content:encoded></item><item><title>Arbitrum Stylus：重新定义智能合约的五大核心竞争力</title><link>https://newpower.pro/posts/blockchain/arbitrum/arbitrumstylusintroduce/</link><guid isPermaLink="true">https://newpower.pro/posts/blockchain/arbitrum/arbitrumstylusintroduce/</guid><pubDate>Thu, 08 May 2025 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;在区块链开发领域，智能合约的技术瓶颈长期困扰着开发者：Solidity 单一语言生态的封闭性、EVM 计算效率的天花板、高昂的 Gas 费用，如同三重枷锁限制着 Web3 应用的创新边界。2023 年，Arbitrum 推出的 Stylus 技术打破了这一僵局，通过&lt;strong&gt;多语言支持、极致性能优化、Gas 成本锐减、无缝扩展性&lt;/strong&gt;与&lt;strong&gt;模块化架构&lt;/strong&gt;，为智能合约开发开启了全新维度。本文将从技术落地角度，深度解析 Stylus 如何重塑行业规则。&lt;/p&gt;
&lt;h2&gt;一、编程语言革命：从「Solidity 孤岛」到「全栈语言互联」&lt;/h2&gt;
&lt;p&gt;传统 EVM 生态中，Solidity 是唯一官方语言，导致全球 90% 以上的开发者（精通 Rust/C++/Python 等主流语言）被挡在 Web3 门外。Stylus 通过&lt;strong&gt;WASM（WebAssembly）技术&lt;/strong&gt;彻底打破壁垒：&lt;/p&gt;
&lt;h3&gt;1. 工业级语言原生支持&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;Rust/C++ 首选&lt;/strong&gt;：支持内存安全特性的 Rust（杜绝缓冲区溢出、悬垂指针等漏洞）与高性能计算见长的 C++，可直接编译为 WASM 字节码部署至 Arbitrum 链。例如，Rust 的加密库&lt;code&gt;rust-crypto&lt;/code&gt;、C++ 的数学库&lt;code&gt;Eigen&lt;/code&gt;可无缝集成到智能合约。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;生态无缝对接&lt;/strong&gt;：通过&lt;code&gt;wasm-bindgen&lt;/code&gt;等工具，Python/Go 代码可间接转译为 WASM，实现「全栈语言上链」，彻底释放传统软件生态的万亿级开发资源。&lt;/p&gt;
&lt;h3&gt;2. 双引擎互操作架构&lt;/h3&gt;
&lt;p&gt;Stylus 并非推翻 EVM，而是构建 **「EVM+WASM」双虚拟机共生体系 **：&lt;/p&gt;
&lt;p&gt;Solidity 合约可调用 Rust 编写的高性能算法（如 zk-SNARK 证明生成）；&lt;/p&gt;
&lt;p&gt;C++ 开发的链上游戏逻辑能直接读取 EVM 账户的 ERC-721 资产；&lt;/p&gt;
&lt;p&gt;跨语言合约通过 ArbOS 的&lt;code&gt;arbitrum-std&lt;/code&gt;标准库实现数据交互，例如：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;// Rust合约调用EVM的ERC-20转账
let transfer_result = evm_call(
    &quot;0xTokenContractAddress&quot;,
    &quot;transfer&quot;,
    &amp;amp;[sender_address, receiver_address, amount]
);

// EVM合约调用Rust的哈希计算
let hash = wasm_call(&quot;crypto_module&quot;, &quot;sha256&quot;, &amp;amp;data_bytes);
&lt;/code&gt;&lt;/pre&gt;
&lt;h2&gt;二、性能跃升：从「EVM 龟速」到「WASM 超音速」&lt;/h2&gt;
&lt;p&gt;EVM 的栈式架构在复杂计算中效率低下，而 Stylus 基于 WASM 的线性内存模型与 JIT 编译，实现&lt;strong&gt;10-100 倍性能突破&lt;/strong&gt;（数据来源：Arbitrum 官方测试网）：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;strong&gt;计算场景&lt;/strong&gt;&lt;/th&gt;
&lt;th&gt;EVM 执行时间&lt;/th&gt;
&lt;th&gt;Stylus（Rust）&lt;/th&gt;
&lt;th&gt;效率提升&lt;/th&gt;
&lt;th&gt;Gas 成本对比&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;SHA-256 哈希计算&lt;/td&gt;
&lt;td&gt;120ms&lt;/td&gt;
&lt;td&gt;8ms&lt;/td&gt;
&lt;td&gt;15 倍&lt;/td&gt;
&lt;td&gt;降低 93%&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;椭圆曲线签名生成&lt;/td&gt;
&lt;td&gt;450ms&lt;/td&gt;
&lt;td&gt;32ms&lt;/td&gt;
&lt;td&gt;14 倍&lt;/td&gt;
&lt;td&gt;降低 89%&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;金融衍生品定价模型&lt;/td&gt;
&lt;td&gt;1.2s&lt;/td&gt;
&lt;td&gt;65ms&lt;/td&gt;
&lt;td&gt;18 倍&lt;/td&gt;
&lt;td&gt;降低 91%&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;这种提升在 DeFi 高频交易中尤为关键：某算法交易协议迁移至 Stylus 后，每秒可处理 2000 笔套利交易，而同等操作在 EVM 上因 Gas 限制最多仅能处理 50 笔。&lt;/p&gt;
&lt;h2&gt;三、Gas 成本锐减：让「链上计算自由」成为可能&lt;/h2&gt;
&lt;p&gt;高 Gas 费用曾是链上复杂逻辑的「拦路虎」，Stylus 通过三重优化实现成本革命：&lt;/p&gt;
&lt;h3&gt;1. 计算效率原生优势&lt;/h3&gt;
&lt;p&gt;WASM 的二进制指令密度比 EVM 字节码高 50%，且无需复杂的 Gas 计量模型，同等计算量下 Gas 消耗呈指数级下降。例如：&lt;/p&gt;
&lt;p&gt;链上验证一个 zk-SNARK 证明，EVM 需消耗 200 万 Gas（约 15 美元），Stylus 仅需 20 万 Gas（约 1.2 美元）；&lt;/p&gt;
&lt;p&gt;复杂的金融合约交互（如期权定价），Gas 成本从平均 50 美元降至 3 美元以下。&lt;/p&gt;
&lt;h3&gt;2. 内存与存储优化&lt;/h3&gt;
&lt;p&gt;Rust 的所有权系统避免了 EVM 常见的「数据拷贝损耗」，WASM 的紧凑格式使链上存储成本降低 40%。某 NFT 游戏迁移后，角色属性动态更新的 Gas 成本从 2000Gas 降至 800Gas。&lt;/p&gt;
&lt;h2&gt;四、扩展性突破：从「功能受限」到「场景无限」&lt;/h2&gt;
&lt;p&gt;Stylus 通过&lt;strong&gt;模块化架构&lt;/strong&gt;与&lt;strong&gt;生态兼容性&lt;/strong&gt;，解锁三大类此前 EVM 无法承载的场景：&lt;/p&gt;
&lt;h3&gt;1. 高性能金融应用&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;高频交易协议&lt;/strong&gt;：C++ 编写的订单簿引擎支持 10 万 TPS，延迟控制在 50 微秒，为算法交易、量化策略提供基础设施；&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;实时风险计算&lt;/strong&gt;：Rust 实现的蒙特卡洛模拟合约，可在 200ms 内完成万人级保单的风险评估，推动去中心化保险产品落地。&lt;/p&gt;
&lt;h3&gt;2. 链上原生交互体验&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;实时物理引擎&lt;/strong&gt;：C++ 移植的 Box2D 引擎在链上实现车辆碰撞、流体模拟，某赛车游戏因此达到 120FPS 流畅度，操作延迟从 3 秒缩短至 200ms；&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;动态 NFT 系统&lt;/strong&gt;：支持复杂状态变更（如武器磨损度、土地肥力），单合约调用 Gas 成本仅为 EVM 的 1/20。&lt;/p&gt;
&lt;h3&gt;3. 企业级合规需求&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;KYC/AML 模块&lt;/strong&gt;：金融机构用 C++ 开发的合规验证逻辑，处理速度提升 50 倍，同时满足 GDPR 数据隐私要求；&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;供应链溯源&lt;/strong&gt;：Rust 实现的零知识证明合约，在不泄露商业数据的前提下完成跨企业验证，审计时间从 30 天压缩至 2 小时。&lt;/p&gt;
&lt;h2&gt;五、Stylus 技术模块：构建开发者友好生态&lt;/h2&gt;
&lt;p&gt;Arbitrum 通过三层技术架构降低开发门槛，形成完整工具链闭环：&lt;/p&gt;
&lt;h3&gt;1. 语言层：保留开发习惯&lt;/h3&gt;
&lt;p&gt;支持主流 IDE（VS Code/PyCharm）调试，兼容 Git 版本控制与 Docker 容器化部署；&lt;/p&gt;
&lt;p&gt;提供&lt;code&gt;arbitrum-std-rs&lt;/code&gt;标准库，封装区块链核心接口（如区块高度获取、合约调用）：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;// 获取当前区块时间戳
let current_time = arbitrum::chain::timestamp();

// 查询ERC-20合约余额
let balance = arbitrum::evm::erc20::balance_of(
    token_contract,
    user_address
);
&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;2. 编译执行层：高效转化链路&lt;/h3&gt;
&lt;p&gt;基于 LLVM 编译器链，将高级语言转为 WASM 字节码，支持&lt;code&gt;cargo build --release&lt;/code&gt;一键生成部署文件；&lt;/p&gt;
&lt;p&gt;Stylus VM 针对区块链场景优化，内存访问速度比通用 WASM 引擎快 30%。&lt;/p&gt;
&lt;h3&gt;3. 互操作层：无缝连接 EVM&lt;/h3&gt;
&lt;p&gt;ArbOS 作为「智能合约操作系统」，实现双虚拟机状态共享与函数互调；&lt;/p&gt;
&lt;p&gt;支持 Solidity 与 Rust/C++ 合约在同一交易中协同，例如：Rust 预言机获取链下数据后，触发 EVM 借贷合约的利率调整。&lt;/p&gt;
&lt;h2&gt;结语：开启智能合约的「全新时代」&lt;/h2&gt;
&lt;p&gt;Arbitrum Stylus 的价值，远不止于技术参数的提升，更在于它打破了「区块链开发的语言壁垒」，让 5000 万传统开发者首次拥有平等参与 Web3 的机会。当 Rust 工程师能用熟悉的语言编写 DeFi 协议，当 C++ 开发者为链游注入复杂物理逻辑，当企业架构师用 Stylus 构建合规链上系统，我们正在见证的，是智能合约从「极客玩具」到「主流基础设施」的历史性跨越。&lt;/p&gt;
&lt;p&gt;对于开发者而言，现在正是抢占技术先机的黄金窗口 ——Stylus 不仅是一个工具，更是通往 Web3 创新蓝海的通行证。随着 Arbitrum 生态的持续扩张，这场由编程语言引发的革命，终将重塑整个区块链开发的未来图景。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;延伸探索&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://docs.arbitrum.io/stylus/gentle-introduction&quot;&gt;Stylus 官方入门文档&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content:encoded></item><item><title>01-构词法</title><link>https://newpower.pro/posts/english/01%E6%9E%84%E8%AF%8D%E6%B3%95/</link><guid isPermaLink="true">https://newpower.pro/posts/english/01%E6%9E%84%E8%AF%8D%E6%B3%95/</guid><pubDate>Wed, 07 May 2025 00:00:00 GMT</pubDate><content:encoded>&lt;blockquote&gt;
&lt;p&gt;通过一定的规则构成的新词, 叫做 “构词法” 。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre&gt;&lt;code&gt;1. affixation  词缀法
2. compounding 合成法
3. conversion  转类法
4. acronym     首字母缩略法
5. clipping    截短法
6. blending    拼缀法
...
&lt;/code&gt;&lt;/pre&gt;
&lt;blockquote&gt;
&lt;p&gt;词缀法又叫派生法,即在一个单词前或后加上词缀,构成新的单词。分为&quot;前缀法&quot; 和 &quot;后缀法&quot;。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre&gt;&lt;code&gt;前缀 + 词根 + 后缀
----------
   含义----------
          词性
&lt;/code&gt;&lt;/pre&gt;
&lt;ol&gt;
&lt;li&gt;前缀法: 一般只引起意思上的变化而不造成词性的改变,只有少数能引起词类的变化。&lt;/li&gt;
&lt;li&gt;后缀法: 一般只引起词性上的变化而不造成意思的变化。&lt;/li&gt;
&lt;/ol&gt;
&lt;h3&gt;变名词的后缀&lt;/h3&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;-ence, -ance&lt;/th&gt;
&lt;th&gt;-tion, -sion&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;存在 exist-existence&lt;/td&gt;
&lt;td&gt;生产 produce-production&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;发生 occur-occurrence&lt;/td&gt;
&lt;td&gt;介绍 introduce-introduction&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;查阅/参考 refer-reference&lt;/td&gt;
&lt;td&gt;消费 consume-consumption&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;更喜欢/偏好 prefer-preference&lt;/td&gt;
&lt;td&gt;减少 reduce-reduction&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;不同 differ-difference&lt;/td&gt;
&lt;td&gt;认为/假想 assume-assumption&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;接受 accept-acceptance&lt;/td&gt;
&lt;td&gt;毁灭 destroy-destruction&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;出现/外表 appear-appearance&lt;/td&gt;
&lt;td&gt;描写 describe-description&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;履行 perform-performance&lt;/td&gt;
&lt;td&gt;打断 interrupt-interruption&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;抵制 resist-resistance&lt;/td&gt;
&lt;td&gt;采纳/收养 adopt-adoption&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;指导 guide-guidance&lt;/td&gt;
&lt;td&gt;防止 prevent-prevention&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;-ment&lt;/th&gt;
&lt;th&gt;-ness&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;广告 advertise-advertisement&lt;/td&gt;
&lt;td&gt;意识 aware-awareness&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;同意 agree-agreement&lt;/td&gt;
&lt;td&gt;苦 bitter-bitterness&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;惊奇 amaze-amazement&lt;/td&gt;
&lt;td&gt;盲目 blind-blindness&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;吃惊 astonish-astonishment&lt;/td&gt;
&lt;td&gt;冷静 calm-calmness&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;通告 announce-announcement&lt;/td&gt;
&lt;td&gt;聪明 clever-cleverness&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;安排 arrange-arrangement&lt;/td&gt;
&lt;td&gt;疯狂 crazy-craziness&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;评估 assess-assessment&lt;/td&gt;
&lt;td&gt;渴望 eager-eagerness&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;发展 develop-development&lt;/td&gt;
&lt;td&gt;公平 fair-fairness&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;失望 disappoint-disappointment&lt;/td&gt;
&lt;td&gt;愚蠢 foolish-foolishness&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;雇佣,就业 employ-employment&lt;/td&gt;
&lt;td&gt;适合 fit-fitness&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
</content:encoded></item><item><title>研-计划</title><link>https://newpower.pro/posts/notebook/%E4%B8%AD%E5%B1%B1%E5%A4%A7%E5%AD%A6-%E7%A0%94-%E8%AE%A1%E5%88%92/</link><guid isPermaLink="true">https://newpower.pro/posts/notebook/%E4%B8%AD%E5%B1%B1%E5%A4%A7%E5%AD%A6-%E7%A0%94-%E8%AE%A1%E5%88%92/</guid><pubDate>Thu, 01 May 2025 00:00:00 GMT</pubDate><content:encoded>&lt;h2&gt;1. 基础阶段（2025 年 5 月 - 2026 年 12 月）&lt;/h2&gt;
&lt;h3&gt;目标：系统学习各科基础知识，构建知识框架&lt;/h3&gt;
&lt;h3&gt;数学（数一）&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;教材：《高等数学》（同济版）、《线性代数》（同济版）、《概率论与数理统计》（浙大版）。&lt;/li&gt;
&lt;li&gt;网课：张宇基础班（高数）、李永乐线代强化班、王式安概率论基础班。&lt;/li&gt;
&lt;li&gt;习题：《660 题》《基础过关 1000 题》，每周完成 2 个章节。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;英语（一）&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;词汇：每日背诵 50 个考研高频词（推荐《红宝书》）。&lt;/li&gt;
&lt;li&gt;语法：学习长难句分析（推荐田静《句句真研》）。&lt;/li&gt;
&lt;li&gt;阅读：精析 2005-2010 年真题阅读，每篇翻译并总结错题。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;专业课（408）&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;教材：《数据结构》（严蔚敏）、《计算机组成原理》（唐朔飞）、《操作系统》（汤小丹）、《计算机网络》（谢希仁）。&lt;/li&gt;
&lt;li&gt;网课：王道考研基础班，配套《王道考研复习指导书》。&lt;/li&gt;
&lt;li&gt;练习：完成教材课后习题，整理思维导图。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;2. 强化阶段（2027 年 1 月 - 2027 年 6 月）&lt;/h2&gt;
&lt;h3&gt;目标：深化重点难点，提高解题速度&lt;/h3&gt;
&lt;h3&gt;数学&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;习题：《张宇 18 讲》《李林 880 题》，重点突破中高难度题型。&lt;/li&gt;
&lt;li&gt;真题：限时完成 2000-2015 年真题，每周 2 套，分析错题。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;英语&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;阅读：精析 2011-2020 年真题，总结阅读技巧（如定位法、排除法）。&lt;/li&gt;
&lt;li&gt;写作：背诵 10 篇大作文模板，每周练习 1 篇。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;专业课&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;真题：完成 2009-2018 年 408 真题，总结高频考点（如数据结构中的算法设计、计组中的流水线计算）。&lt;/li&gt;
&lt;li&gt;模拟题：做《王道模拟 8 套卷》，训练答题时间分配。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;3. 冲刺阶段（2027 年 7 月 - 2027 年 12 月）&lt;/h2&gt;
&lt;h3&gt;目标：模拟实战，查漏补缺&lt;/h3&gt;
&lt;h3&gt;数学&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;真题：二刷 2016-2022 年真题，重点关注近 5 年新题型。&lt;/li&gt;
&lt;li&gt;模拟题：做《李林 6+4 套卷》《合工大超越卷》，保持题感。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;英语&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;模考：每周全真模拟 1 套真题（含作文），严格限时 3 小时。&lt;/li&gt;
&lt;li&gt;翻译：练习 2010-2020 年真题翻译，总结翻译技巧。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;专业课&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;真题：三刷 408 真题，重点突破薄弱环节（如操作系统中的进程调度、计算机网络中的 TCP 协议）。&lt;/li&gt;
&lt;li&gt;复试准备：提前学习离散数学（推荐《离散数学及其应用》）和 C 语言（推荐《C Primer Plus》），为复试笔试做准备。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;政治&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;教材：《肖秀荣精讲精练》《1000 题》。&lt;/li&gt;
&lt;li&gt;网课：徐涛强化班（马原、毛中特）。&lt;/li&gt;
&lt;li&gt;冲刺：11 月开始背诵《肖四》《肖八》，关注时政热点。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;时间管理&lt;/h2&gt;
&lt;h3&gt;每日规划&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;数学：3 小时（1.5 小时网课 + 1.5 小时习题）。&lt;/li&gt;
&lt;li&gt;英语：2 小时（1 小时单词 + 1 小时阅读）。&lt;/li&gt;
&lt;li&gt;专业课：3 小时（2 小时网课 + 1 小时习题）。&lt;/li&gt;
&lt;li&gt;政治：1 小时（后期增加至 2 小时）。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;每周总结&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;周日上午复盘本周学习进度，调整下周计划。&lt;/li&gt;
&lt;li&gt;整理错题本，标注易错知识点。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;资源推荐&lt;/h2&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;科目&lt;/th&gt;
&lt;th&gt;推荐资料&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;数学&lt;/td&gt;
&lt;td&gt;《张宇考研数学基础 30 讲》《李林考研数学 880 题》《历年真题详解》&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;英语&lt;/td&gt;
&lt;td&gt;《考研英语长难句解密》《考研英语高分写作》《黄皮书真题解析》&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;专业课&lt;/td&gt;
&lt;td&gt;《王道考研复习指导书》《天勤计算机考研高分笔记》《408 真题解析》&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;政治&lt;/td&gt;
&lt;td&gt;《肖秀荣精讲精练》《徐涛冲刺背诵笔记》《肖四肖八》&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
</content:encoded></item></channel></rss>